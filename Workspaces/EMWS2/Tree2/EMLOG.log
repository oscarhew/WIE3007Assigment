*------------------------------------------------------------*
User:                Oscar
Date:                January 06, 2024
Time:                00:55:57
Site:                12601940
Platform:            W32_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                January 06, 2024
Time:                00:55:53
*------------------------------------------------------------*
14716  proc freq data=EMWS2.Tree2_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.Tree2META;
14718  run;
 
NOTE: There were 17 observations read from the data set EMWS2.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
14719  proc print data=WORK.Tree2META label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 6 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
>>>>>>>>>>>>>> TARGET(   NAME='quality'
                         ROLE='TARGET'
                         LEVEL='INTERVAL'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         REPORT='N'
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL=''
                         FORMAT='BEST12.0'
                         INFORMAT='BEST32.0'
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                         USE='Y'
                      )[11407]
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
"No decisions defined for target "quality"."
14787  proc print data = EMWS2.Tree2_quality_DM noobs label;
14788  var _type_ variable label;
14789  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14790  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14791  title9 ' ';
14792  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14793  run;
 
NOTE: There were 3 observations read from the data set EMWS2.TREE2_QUALITY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14794  title10;
 
14795  %let EMEXCEPTIONSTRING=;
15312  *------------------------------------------------------------*;
15313  * Tree2: Generation of macros and macro variables;
15314  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15315  *------------------------------------------------------------*;
 
15316  %let EMEXCEPTIONSTRING=;
15317  *------------------------------------------------------------*;
15318  * TRAIN: Tree2;
15319  *------------------------------------------------------------*;
15320  %let EM_ACTION = TRAIN;
15321  %let syscc = 0;
15322  %macro main;
15323
15324    %if %upcase(&EM_ACTION) = CREATE %then %do;
15325      filename temp catalog 'sashelp.emmodl.tree_create.source';
15326      %include temp;
15327      filename temp;
15328
15329      %em_tree_create;
15330    %end;
15331
15332     %else
15333     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15334
15335         filename temp catalog 'sashelp.emmodl.tree_train.source';
15336         %include temp;
15337         filename temp;
15338         %em_tree_train;
15339     %end;
15340
15341    %else
15342    %if %upcase(&EM_ACTION) = SCORE %then %do;
15343      filename temp catalog 'sashelp.emmodl.tree_score.source';
15344      %include temp;
15345      filename temp;
15346
15347      %em_tree_score;
15348
15349    %end;
15350
15351    %else
15352    %if %upcase(&EM_ACTION) = REPORT %then %do;
15353
15354         filename temp catalog 'sashelp.emmodl.tree_report.source';
15355         %include temp;
15356         filename temp;
15357
15358         %em_tree_report;
15359     %end;
15360
15361    %else
15362    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15363
15364         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15365         %include temp;
15366         filename temp;
15367         %EM_TREE_OPENTREEVIEWER;
15368
15369     %end;
15370
15371    %else
15372    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15373
15374         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15375         %include temp;
15376         filename temp;
15377         %EM_TREE_CLOSETREEVIEWER;
15378
15379     %end;
15380
15381
15382     %doendm:
15383  %mend main;
15384
15385  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15387 +%macro em_tree_train;
15389 +   %if &EM_IMPORT_DATA eq %then %do;
15390 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15391 +       %put &em_codebar;
15392 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15393 +       %put &errormsg;
15394 +       %put &em_codebar;
15395 +       %goto doendm;
15396 +   %end;
15397 +   %else
15398 +       %let EMEXCEPTIONSTRING =;
15400 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15401 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15402 +        %put &em_codebar;
15403 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15404 +        %put &errormsg;
15405 +        %put &em_codebar;
15406 +        %goto doendm;
15407 +   %end;
15409 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15410 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15411 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15412 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15413 +        %put &em_codebar;
15414 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15415 +        %put &errormsg;
15416 +        %put &em_codebar;
15417 +        %goto doendm;
15418 +   %end;
15420 +   /* Initialize property macro variables */
15421 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15422 +   %include temp;
15423 +   filename temp;
15425 +   %EM_SetProperties;
15427 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15428 +   %EM_GETNAME(key=EMTREE, type=DATA);
15429 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15430 +     /* if import eq Y and no importtable defined, throw an exception */
15431 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15432 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15433 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15434 +         %put &em_codebar;
15435 +         %put &errmsg;
15436 +         %put &em_codebar;
15437 +         %goto doendm;
15438 +      %end;
15439 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15440 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15441 +         %put &em_codebar;
15442 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15443 +         %put &errormsg;
15444 +         %put &em_codebar;
15445 +         %goto doendm;
15446 +      %end;
15447 +      %else %do;
15448 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15449 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15450 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15451 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15452 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15453 +         %let dsid = %sysfunc(close(&dsid));
15454 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15455 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15456 +            %put &em_codebar;
15457 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15458 +            %put &errormsg;
15459 +            %put &em_codebar;
15460 +            %goto doendm;
15461 +         %end;
15462 +      %end;
15463 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15464 +         proc delete data=&EM_USER_EMTREE;
15465 +         run;
15466 +      %end;
15467 +   %end;
15468 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15469 +      proc delete data=&EM_USER_EMTREE;
15470 +      run;
15471 +   %end;
15473 +   /* load tree macros */
15474 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15475 +   %include temp;
15476 +   filename temp;
15478 +   /* data sets */
15479 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15480 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15481 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15483 +   /* files */
15484 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15486 +   /* check actual num of target levels */
15487 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15488 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15489 +                              nLevel=_nTargetLevel );
15490 +      %if &_nTargetLevel  > 2 %then %do;
15491 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15492 +        %put &em_codebar;
15493 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15494 +        %put &errormsg;
15495 +        %put &em_codebar;
15496 +        %goto doendm;
15497 +      %end;
15498 +   %end;
15500 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15501 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15502 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15503 +        %let costflag=0;
15504 +        data _null_;
15505 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15506 +          if eof then call symput("costflag", _N_);
15507 +        run;
15508 +        %if &costflag gt 0 %then %do;
15509 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15510 +          %put &em_codebar;
15511 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15512 +          %put &errormsg;
15513 +          %put &em_codebar;
15514 +          %goto doendm;
15515 +       %end;
15516 +     %end;
15517 +   %end;
15519 +   /* determine if multiple targets will be processed */
15520 +   %let em_tree_multipleTargets=N;
15521 +   %let em_tree_numTarget = 1;
15522 +   %let em_tree_targetVars=;
15524 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15525 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15526 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15527 +         %let em_tree_multipleTargets=N;
15528 +      %end;
15529 +      %else %do;
15530 +         /* create macro array of targets  */
15531 +         data _null_;
15532 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15533 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15534 +           if eof then
15535 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15536 +        run;
15538 +        %if &em_tree_numTarget gt 1 %then %do;
15539 +           %let em_tree_multipleTargets=Y;
15540 +        %end;
15541 +      %end;
15542 +   %end;
15544 +   /* create view of only necessary variable for performance reasons */
15545 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15546 +   data &tempData / view=&tempData;
15547 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15548 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15549 +       %EM_TARGET
15550 +     %end;
15551 +     %else %do;
15552 +       %if &em_tree_numTarget ne 0 %then %do;
15553 +         %do i=1 %to &em_tree_numTarget;
15554 +            &&em_tree_targetVars&i
15555 +         %end;
15556 +       %end;
15557 +     %end;
15558 +     );
15559 +   run;
15561 +   /* run Tree procedure */
15562 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15564 +   /* Check return code and throw exception if error is detected */
15565 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15566 +   %if &syserr %then %do;
15567 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15568 +     %goto doendm;
15569 +   %end;
15571 +   /* add decision score code if multiple targets are processed */
15572 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15573 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15574 +   %end;
15576 +   /* create outfit dataset if multiple score statements have been executed */
15577 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15579 +   /* create English Rules */
15580 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15581 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15582 +       %em_tree_makeEnglishRules;
15584 +       /* English Rules */
15585 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15587 +     %end;
15588 +   filename x;
15590 +   %doendm:
15591 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15592 +%macro EM_SetProperties;
15594 +   /* train properties */
15595 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15637 +   /* properties for interactive sample */
15638 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15643 +   /* report properties */
15644 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15658 +   /* score properties */
15659 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15660 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15662 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS2.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15664 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15665 +  %global &nLevel;
15666 +  proc dmdb batch data=&indata
15667 +    classout=_tmp_dmdbout;
15668 +    class &target;
15669 +  run;
15670 +  data _tmp_dmdbout;
15671 +    set _tmp_dmdbout;
15672 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15673 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15674 +  run;
15675 +  data _null_;
15676 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15677 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15678 +    %let dsid = %sysfunc(close(&dsid));
15679 +     call symput("&nLevel", put(&_obs, Best12.));
15680 +  run;
15682 +  proc datasets lib=work nolist;
15683 +     delete _tmp_dmdbout;
15684 +  run;
15685 +  quit;
15686 +%Mend EM_CheckBinaryTargetLevel;
15689 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15691 +  /* determine the number of obs in training data */
15692 +  proc sql;
15693 +    reset noprint;
15694 +    select count(*) into :em_nobs from &indata;
15695 +  quit;
15697 +  /* determine the number of input variables */
15698 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15699 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15701 +  /* retrieve targetEvent from decmeta */
15702 +  %let targetEvent=;
15703 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15704 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15705 +      data _null_;
15706 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15707 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15708 +      run;
15709 +    %end;
15710 +  %end;
15712 +  /* create targetTable if multipleTar eq Y */
15713 +  data temptarget;
15714 +    set &EM_DATA_VARIABLESET;
15715 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15716 +  run;
15718 + /* data sets */
15719 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15720 + %EM_GETNAME(key=EMTREE,        type=DATA);
15721 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15722 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15723 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15724 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15725 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15726 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15727 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15728 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15730 + /* files */
15731 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15732 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15734 + /* turn on pmml if requested */
15735 + %let nnpmml=0;
15736 + %if %symexist(EM_PMML) %then %do;
15737 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15738 +       %let nnpmml=1;
15740 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15741 +%end;
15743 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15745 + %if &nnpmml or &numClassTarget %then %do;
15747 +       /* create dmdb needed for pmml generation */
15748 +       %let tree_maxlevel = 512;
15749 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15750 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15751 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15752 +         %end;
15753 +       %end;
15754 +       %if &tree_maxlevel gt 0 %then %do;
15755 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15756 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15757 +       %end;
15759 +       %let targetOrderString =;
15760 +       %let targetString = ;
15761 +       data _null_;
15762 +          length orderString nameString $10000;
15763 +          retain orderString nameString;
15764 +          set &em_data_variableset end=eof;
15765 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15766 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15767 +          %end;
15768 +          %else %do;
15769 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15770 +          %end;          select(order);
15771 +            when('')        order ='DESC';
15772 +            when('FMTASC')  order='ASCFMT';
15773 +            when('FMTDESC') order='DESFMT';
15774 +            otherwise;
15775 +          end;
15776 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15777 +          nameString = trim(nameString)!!' '!!trim(NAME);
15779 +          if eof then do;
15780 +             call symput('targetOrderString', trim(orderString));
15781 +             call symput('targetString', trim(nameString));
15782 +          end;
15783 +       run;
15785 +       %let arborkluge= "work._treeDMDB";
15787 +       proc dmdb batch data=&indata
15788 +       %if &nnpmml %then %do;
15789 +           PMML
15790 +       %end;
15791 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15794 +   %if &nnpmml %then %do;
15795 +        %if "%EM_ID" ne "" %then %do;
15796 +          id %EM_ID;
15797 +        %end;
15798 +        %if &EM_NUM_CLASS gt 0 %then %do;
15799 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15800 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15801 +               &targetOrderString;
15802 +        %end;
15803 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15804 +          var %EM_INTERVAL;
15805 +        %end;
15806 +        target &targetString %EM_INTERVAL_TARGET;
15807 +        %if "%EM_FREQ" ne "" %then %do;
15808 +          freq %EM_FREQ;
15809 +        %end;
15810 +  %end;
15811 +  %else %do;
15812 +      class  &targetOrderString;
15813 +      target &targetString %EM_INTERVAL_TARGET;
15814 +  %end;
15815 +       run;
15816 +       quit;
15818 +       proc datasets lib=work nolist;
15819 +          delete classout varout;
15820 +       run;
15821 +       quit;
15823 +    %end;
15824 + %end;
15826 + /* run Arbor procedure */
15827 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15828 +  proc arbor data=&INDATA
15830 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15831 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15832 +  %end;
15834 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15835 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15836 +  %end;
15838 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15839 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15840 +  %end;
15842 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15843 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15844 +  %end;
15846 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15847 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15848 +  %end;
15850 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15851 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15852 +  %end;
15853 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15854 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15855 +  %end;
15856 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15857 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15858 +  %end;
15860 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15861 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15862 +      alpha = &EM_PROPERTY_SIGLEVEL
15863 +    %end;
15864 +  %end;
15866 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15867 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15868 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15869 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15870 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15872 +        padjust =
15873 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15874 +          &chaid
15875 +        %end;
15876 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15877 +          DEPTH
15878 +        %end;
15879 +      %end;
15880 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15881 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15882 +         pvars = &num_inputs
15883 +      %end;
15884 +    %end;
15885 +  %end;
15886 +  %else %do;
15887 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15888 +         padjust = NONE
15889 +      %end;
15890 +  %end;
15892 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15893 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15894 +    Maxrules = &num_nrules
15895 +  %end;
15897 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15898 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15899 +    Maxsurrs = &num_nsurrs
15900 +  %end;
15902 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15903 +     Missing=&EM_PROPERTY_MISSINGVALUE
15904 +  %end;
15906 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15907 +     USEVARONCE
15908 +  %end;
15910 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15911 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15912 +  %end;
15915 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15916 +    event = "&targetEvent"
15917 +  %end;
15919 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15920 +     DECSEARCH
15921 +  %end;
15923 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15924 +     PRIORSSEARCH
15925 +  %end;
15927 +  %if &arbor_1 ne %then %do;
15928 +    &arbor_1
15929 +  %end;
15931 +  %if &em_arbor ne %then %do;
15932 +     &em_arbor
15933 +  %end;
15934 +  ;
15935 + %end;
15936 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15937 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15938 +       interact;
15939 + %end;
15940 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15941 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15942 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15943 +    %put &em_codebar;
15944 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15945 +    %put &errormsg;
15946 +    %put &em_codebar;
15947 +    %goto doendm;
15948 +   %end;
15949 +   %else %do;
15950 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15951 +       interact;
15952 +   %end;
15953 + %end;
15955 + %else %do;
15956 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15957 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15958 +    %put &em_codebar;
15959 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15960 +    %put &errormsg;
15961 +    %put &em_codebar;
15962 +    %goto doendm;
15963 +   %end;
15964 +   %else %do;
15965 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15966 +        interact;
15967 +   %end;
15968 + %end;
15970 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15971 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15972 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15973 +    %end;
15975 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15976 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15977 +    %end;
15979 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15980 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15981 +    %end;
15983 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15984 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15985 +    %end;
15987 +    %if "%EM_FREQ" ne "" %then %do;
15988 +       freq %EM_FREQ;
15989 +    %end;
15991 +    %if "&multipleTar" eq "Y" %then %do;
15992 +       /* cycle through all target vars in variableset */
15993 +       %let tdsid = %sysfunc(open(temptarget));
15994 +       %if &tdsid %then %do;
15995 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15996 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15997 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15998 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15999 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16000 +             target &var / level = &lvl
16001 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16002 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16003 +             %end;
16004 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16005 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16006 +             %end;
16007 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16008 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16009 +             %end;
16010 +          %end;
16011 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16012 +       %end;
16013 +       useTarget variable = %EM_TARGET;
16014 +    %end;
16015 +    %else %do;
16016 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16017 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16018 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16019 +      %end;
16020 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16021 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16022 +      %end;
16023 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16024 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16025 +      %end;
16026 +    %end;
16028 +    %if "&multipleTar" eq "N" %then %do;
16029 +      &EM_DEC_STATEMENT;
16030 +    %end;
16032 +    Performance &EM_PROPERTY_PERFORMANCE
16033 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16034 +      nodesize=&EM_PROPERTY_NODESAMPLE
16035 +    %end;
16036 +    ;
16038 +    %if "&intFlag" eq "Y" %then %do;
16039 +       INTERACT Largest;
16040 +       Train maxnewdepth=0;
16041 +    %end;
16043 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16044 +         Assess
16045 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16046 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16047 +              %put &em_codebar;
16048 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16049 +              %put &errormsg;
16050 +              %put &em_codebar;
16051 +            %end;
16052 +            %else %do;
16053 +               Validata=&EM_IMPORT_VALIDATE
16054 +            %end;
16055 +         %end;
16056 +         %else %do;
16057 +           NoValidata
16058 +         %end;
16059 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16060 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16061 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16062 +               %if &dsid %then %do;
16063 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16064 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16065 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16066 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16067 +                   %else %do;
16068 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16069 +                      %else %let measure= MISC;
16070 +                   %end;
16071 +                 %end;
16072 +               %end;
16073 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16074 +            %end;
16075 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16076 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16077 +                 %let measure=ASE;
16078 +              %end;
16079 +              %else %do;
16080 +                 %let measure=MISC;
16081 +              %end;
16082 +            %end;
16083 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16084 +              %let measure=ASE;
16085 +            %end;
16086 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16087 +               %let measure = LIFT;
16088 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16089 +               %if &dsid %then %do;
16090 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16091 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16092 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16093 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16094 +                 %end;
16095 +               %end;
16096 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16097 +            %end;
16098 +            measure=&measure
16099 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16100 +               event = "&targetEvent"
16101 +            %end;
16102 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16103 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16104 +            %end;
16105 +         %end;
16106 +         %if "&multipleTar" eq "N" %then %do;
16107 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16108 +               CV
16109 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16110 +                 CVNITer = &EM_PROPERTY_CVNITER
16111 +               %end;
16112 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16113 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16114 +               %end;
16115 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16116 +                 CVSeed = &EM_PROPERTY_CVSEED
16117 +               %end;
16118 +            %end;
16119 +         %end;
16120 +       %end;
16121 +      ;
16123 +      %if "&intFlag" ne "Y" %then %do;
16124 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16125 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16126 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16127 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16129 +          SUBTREE &subtree
16130 +          %if "&subtree" eq "NLEAVES" %then %do;
16131 +            =&EM_PROPERTY_NSUBTREE
16132 +          %end;
16133 +          ;
16134 +        %end;
16136 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16137 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16138 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16139 +          %end;
16140 +       %end;
16141 +      %end;
16142 + %end;
16145 + MakeMacro nleaves = nleaves;
16146 + save
16147 + %if "&EM_USER_EMTREE" ne "" %then %do;
16148 +   MODEL=&EM_USER_EMTREE
16149 + %end;
16150 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16151 +   SEQUENCE=&EM_USER_OUTSEQ
16152 + %end;
16153 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16154 +   IMPORTANCE=&EM_USER_OUTIMPORT
16155 + %end;
16156 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16157 +   NODESTAT=&EM_USER_OUTNODES
16158 + %end;
16159 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16160 +   SUMMARY=&EM_USER_OUTSUMMARY
16161 + %end;
16162 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16163 +   STATSBYNODE=&EM_USER_OUTSTATS
16164 + %end;
16165 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16166 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16167 + %end;
16168 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16169 +   Pathlistnonmissing=&EM_USER_OUTPATH
16170 + %end;
16171 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16172 +   RULES = &EM_USER_OUTRULES
16173 + %end;
16174 + ;
16176 + %if "&intFlag" ne "Y" %then %do;
16178 +   %let lookupString = ;
16179 +   %if ^%symexist(EM_OPTION) %then
16180 +      %let EM_OPTION=;
16182 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16183 +      %let lookupString = LOOKUP=SELECT;
16184 +   %end;
16186 +   %let codetext=;
16187 +   %let norescodetxt=;
16189 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16190 +     %let codetext=&codetext DUMMY;
16191 +     %let norescodetxt=&norescodetxt DUMMY;
16192 +   %end;
16193 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16194 +     %let codetext=&codetext NOLEAFID;
16195 +     %let norescodetxt=&norescodetxt NOLEAFID;
16196 +   %end;
16197 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16198 +     %let norescodetxt=&norescodetxt NOPRED;
16199 +   %end;
16201 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16202 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16204 +   %if &nnpmml %then %do;
16205 +     code pmml;
16206 +   %end;
16208 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16209 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16210 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16211 +   %end;
16212 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16213 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16214 +   %end;
16215 + %end;
16217 + run;
16218 + quit;
16220 + /*%em_checkerror(); */
16221 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16222 +   /* Delete DMDB catalog */
16223 +   proc datasets lib=work nolist;
16224 +       delete _treeDMDB / mt=cat;
16225 +  run;
16226 +  %end;
16228 + %if &nnpmml %then %do;
16229 +    ods pmml close;
16230 + %end;
16232 +  %doendm:
16234 +%mend em_tree_runTreeProcedure;
16236 +%macro em_tree_createFitStats( multipleTar= );
16239 +  /* create targetTable is multipleTar eq Y */
16240 +  data temptarget;
16241 +    set &EM_DATA_VARIABLESET;
16242 +    where ROLE="TARGET";
16243 +  run;
16245 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16246 +   data &EM_USER_EMOUTFIT;
16247 +     length target $32;
16248 +     merge work.fit_train
16249 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16250 +       work.fit_valid
16251 +     %end;
16252 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16253 +       work.fit_test
16254 +     %end;
16255 +     ;
16256 +     %if "&multipleTar" eq "N" %then %do;
16257 +       target="%EM_TARGET";
16258 +     %end;
16259 +     %else %do;
16260 +       target = _TARGET_;
16261 +     %end;
16262 +     drop _NW_ _SUMW_
16263 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16264 +        _VSUMW_
16265 +     %end;
16266 +     ;
16267 +   run;
16269 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16270 +     proc datasets library=work nolist;
16271 +       delete fit_valid;
16272 +     run;
16273 +   %end;
16274 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16275 +     proc datasets library=work nolist;
16276 +       delete fit_test;
16277 +     run;
16278 +   %end;
16280 +%mend em_tree_createFitStats;
16283 +%macro em_tree_makeEnglishRules;
16285 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16286 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16288 +  /* verify that necessary tables exist and if not, skip processing */
16289 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16290 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16291 +    %goto doendm;
16292 +  %end;
16293 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16294 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16295 +    %goto doendm;
16296 +  %end;
16298 +  /* determine length of variable in outpath dataset */
16299 +  %let vlength= ;
16300 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16301 +  %if &dsid ne %then %do;
16302 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16303 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16304 +  %end;
16305 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16307 +  data tempoutpath;
16308 +    length varname $&vlength;
16309 +    retain varname;
16310 +    set &EM_USER_OUTPATH;
16312 +    if ^missing(variable) then varname=variable;
16313 +    else if ^missing(var_name) then varname=var_name;
16314 +    output;
16315 +  run;
16317 +  /* create an array of generated predicted variable names */
16318 +  %let tree_pred_vars = ;
16319 +  %let tree_pred_label = ;
16320 +  %let numpred= 0;
16321 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16323 +    data _null_;
16324 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16325 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16326 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16327 +     if eof then
16328 +       call symput('numpred', strip(put(_N_, BEST.)));
16329 +    run;
16330 +  %end;
16332 +  /* determine if NPRIORS exists in outnodes  */
16333 +  %local nprior_flag;
16334 +  data _null_;
16335 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16336 +    if eof then do;
16337 +      call symput('nprior_flag', strip(put(npriors, best.)));
16338 +    end;
16339 +  run;
16341 +  proc sort data=tempoutpath; by node; run;
16342 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16344 +  data tempoutpath;
16345 +    merge tempoutpath(in=_a) outnodes(keep= node
16346 +    %if "&nprior_flag" ne "." %then %do;
16347 +      NPRIORS
16348 +    %end;
16349 +    %else %do;
16350 +      N
16351 +    %end;
16352 +    %if &numpred gt 0 %then %do;
16353 +      %do i=1 %to &numpred;
16354 +        &&tree_pred_vars&i
16355 +      %end;
16356 +    %end;
16357 +    );
16358 +    by node;
16359 +    if _a;
16360 +  run;
16362 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16364 +  data _null_;
16365 +    file x;
16366 +    set tempoutpath;
16367 +    by node descending varname;
16368 +    retain origvar oldnode string;
16369 +    length origvar $32 oldnode 8 string $200;
16371 +    if _N_ = 1 then do;
16372 +      origvar = varname;
16373 +      oldnode = node;
16374 +    end;
16376 +    if first.node then do;
16377 +       put "&EM_CODEBAR";
16378 +       put " Node = " node;
16379 +       put "&EM_CODEBAR";
16380 +    end;
16382 +      if first.varname then do;
16383 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16384 +            if MISSING(CHARACTER_VALUE) then do;
16385 +             if NUMERIC_VALUE ne .  then do;
16386 +              if ^first.node then do;
16387 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16388 +              end;
16389 +              else do;
16390 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16391 +              end;
16392 +             end;
16393 +            end;
16394 +            else do;
16395 +              if ^first.node then do;
16396 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16397 +              end;
16398 +              else do;
16399 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16400 +              end;
16401 +             end;
16402 +         end;
16403 +         else if RELATION in ("=") then do;
16404 +            if ^first.node then do;
16405 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16406 +            end;
16407 +            else do;
16408 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16409 +            end;
16410 +         end;
16411 +         else if RELATION in ("ISMISSING") then do;
16412 +            if ^first.node then do;
16413 +              string = " AND "|| strip(varname) || " equals Missing";
16414 +            end;
16415 +            else do;
16416 +              string = "if "|| strip(varname) ||" equals Missing";
16417 +            end;
16418 +         end;
16419 +         else if RELATION in ("ISNOTMISSING") then do;
16420 +            if ^first.node then do;
16421 +              string = " AND "|| strip(varname) || " equals All Values";
16422 +            end;
16423 +            else do;
16424 +              string = "if "|| strip(varname) ||" equals All Values";
16425 +            end;
16426 +         end;
16427 +         if ^missing(varname) then origvar = varname;
16428 +         oldnode=node;
16430 +      end;
16431 +      else do;
16432 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16433 +          if MISSING(CHARACTER_VALUE) then do;
16434 +           if  NUMERIC_VALUE ne .  then do;
16435 +            if ^MISSING(string) then
16436 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16437 +            else
16438 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16439 +           end;
16440 +          end;
16441 +          else do;
16442 +            if ^MISSING(string) then
16443 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16444 +            else
16445 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16446 +          end;
16448 +         end;
16449 +         else if RELATION in ("=") then do;
16450 +           string = strip(string)||", "||strip(character_value);
16451 +         end;
16452 +         else if RELATION in ("ISMISSING") then do;
16454 +         end;
16455 +         if ^missing(varname) then origvar = varname;
16456 +         oldnode=node;
16457 +      end;
16458 +      if last.varname then do;
16459 +         if RELATION in ("ISMISSING") then do;
16460 +           if ^first.varname then do;
16461 +             string = strip(string) || " or MISSING";
16462 +           end;
16463 +         end;
16464 +         put string;
16465 +         if ^missing(varname) then origvar = varname;
16466 +         oldnode=node;
16467 +      end;
16469 +      if last.node then do;
16470 +         put "then ";
16471 +         put " Tree Node Identifier   = " node;
16473 +         %if "&nprior_flag" ne "." %then %do;
16474 +           put " Number of Observations = " NPRIORS;
16475 +         %end;
16476 +         %else %do;
16477 +           put " Number of Observations = " N;
16478 +         %end;
16480 +         %if &numpred gt 0 %then %do;
16481 +           %do i=1 %to &numpred;
16482 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16483 +           %end;
16484 +         %end;
16486 +         put " ";
16487 +         if ^missing(varname) then origvar = varname;
16488 +         oldnode=node;
16489 +      end;
16491 +  run;
16493 +  proc datasets lib=work nolist;
16494 +    delete tempoutpath outnodes;
16495 +  run;
16497 +  %doendm:
16498 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS2.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
NOTE: There were 5198 observations read from the data set EMWS2.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1601202 kilobytes of physical memory.
NOTE: Will use 5198 out of 5198 training cases.
NOTE: Using memory pool with 138391552 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 1841096 bytes of work memory.
NOTE: The subtree sequence contains 40 subtrees. The largest has 79 nodes and 40 leaves.
NOTE: Using subtree with 79 nodes and 40 leaves.
NOTE: Using subtree with 79 nodes and 40 leaves.
NOTE: Created macro variable NLEAVES equal to 40.
NOTE: The data set EMWS2.TREE2_OUTIMPORT has 13 observations and 4 variables.
NOTE: The data set EMWS2.TREE2_EMTREE has 2396 observations and 4 variables.
NOTE: The data set EMWS2.TREE2_OUTNODES has 79 observations and 14 variables.
NOTE: The data set EMWS2.TREE2_OUTPATH has 396 observations and 7 variables.
NOTE: The data set EMWS2.TREE2_OUTRULES has 799 observations and 6 variables.
NOTE: The data set EMWS2.TREE2_OUTSEQ has 40 observations and 10 variables.
NOTE: The data set EMWS2.TREE2_OUTSTATS has 237 observations and 4 variables.
NOTE: The data set EMWS2.TREE2_OUTSUMMARY has 5 observations and 2 variables.
NOTE: The data set EMWS2.TREE2_OUTTOPOLOGY has 79 observations and 5 variables.
NOTE: External file C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\TREEFLOW.sas opened.
NOTE: External file C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
NOTE: There were 5198 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
 
 
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.43 seconds
      cpu time            0.20 seconds
 
NOTE: There were 5198 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 5198 observations read from the data set EMWS2.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.44 seconds
      cpu time            0.20 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS2.TREE2_EMOUTFIT has 1 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 396 observations read from the data set EMWS2.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 396 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_QUALITY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 396 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 396 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set EMWS2.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 79 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 396 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 79 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 396 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 396 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 396 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195
NOTE: The file X is:
      Filename=C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=06Jan2024:00:55:54,
      Create Time=06Jan2024:00:55:54
 
NOTE: 475 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 70.
NOTE: There were 396 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
16500
16501  *------------------------------------------------------------*;
16502  * End TRAIN: Tree2;
16503  *------------------------------------------------------------*;
 
16504  *------------------------------------------------------------*;
16505  * Close any missing semi colons;
16506  *------------------------------------------------------------*;
16507  ;
16508  ;
16509  ;
16510  ;
16511  quit;
16512  *------------------------------------------------------------*;
16513  * Close any unbalanced quotes;
16514  *------------------------------------------------------------*;
16515  /*; *"; *'; */
16516  ;
16517  run;
16518  quit;
16519  /* Reset EM Options */
16520  options formchar="|----|+|---+=|-/\<>*";
16521  options nocenter ls=256 ps=10000;
16522  goptions reset=all device=GIF NODISPLAY;
 
16523  proc sort data=WORK.EM_USER_REPORT;
16524  by ID VIEW;
16525  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                January 06, 2024
Time:                00:55:55
*------------------------------------------------------------*
16627  %let EMEXCEPTIONSTRING=;
16628  *------------------------------------------------------------*;
16629  * SCORE: Tree2;
16630  *------------------------------------------------------------*;
16631  %let EM_ACTION = SCORE;
16632  %let syscc = 0;
16633  %macro main;
16634
16635    %if %upcase(&EM_ACTION) = CREATE %then %do;
16636      filename temp catalog 'sashelp.emmodl.tree_create.source';
16637      %include temp;
16638      filename temp;
16639
16640      %em_tree_create;
16641    %end;
16642
16643     %else
16644     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16645
16646         filename temp catalog 'sashelp.emmodl.tree_train.source';
16647         %include temp;
16648         filename temp;
16649         %em_tree_train;
16650     %end;
16651
16652    %else
16653    %if %upcase(&EM_ACTION) = SCORE %then %do;
16654      filename temp catalog 'sashelp.emmodl.tree_score.source';
16655      %include temp;
16656      filename temp;
16657
16658      %em_tree_score;
16659
16660    %end;
16661
16662    %else
16663    %if %upcase(&EM_ACTION) = REPORT %then %do;
16664
16665         filename temp catalog 'sashelp.emmodl.tree_report.source';
16666         %include temp;
16667         filename temp;
16668
16669         %em_tree_report;
16670     %end;
16671
16672    %else
16673    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16674
16675         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16676         %include temp;
16677         filename temp;
16678         %EM_TREE_OPENTREEVIEWER;
16679
16680     %end;
16681
16682    %else
16683    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16684
16685         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16686         %include temp;
16687         filename temp;
16688         %EM_TREE_CLOSETREEVIEWER;
16689
16690     %end;
16691
16692
16693     %doendm:
16694  %mend main;
16695
16696  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16698 +%macro em_tree_score;
16700 +   /* determine if multiple targets will be processed */
16701 +   %let em_tree_multipleTargets=N;
16702 +   %let em_tree_numTarget=1;
16703 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16704 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16705 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16706 +         %let em_tree_multipleTargets=N;
16707 +      %end;
16708 +      %else %do;
16709 +         /* create macro array of targets  */
16710 +         data _null_;
16711 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16712 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16713 +           if eof then
16714 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16715 +        run;
16717 +        %if &em_tree_numTarget gt 1 %then %do;
16718 +           %let em_tree_multipleTargets=Y;
16719 +        %end;
16720 +      %end;
16721 +   %end;
16723 +   /* build flow and publish scoring code */
16724 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16725 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16727 +   filename treeflow "&EM_USER_TREEFLOW";
16728 +   filename treepub "&EM_USER_TREEPUBLISH";
16730 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16731 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16733 +   %em_copyfile(infref=treeflow, outfref=flowref);
16734 +   %em_copyfile(infref=treepub, outfref=pubref);
16736 +   filename treeflow;
16737 +   filename treepub;
16739 +   /* if priors are used, add code to generate unadjusted residuals in export */
16740 +   %let useAdjPriors = N;
16741 +   data _null_;
16742 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16743 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16744 +   run;
16745 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16746 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16747 +      %include temp;
16748 +      filename temp;
16750 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16751 +      filename adjref "&EM_USER_adjResidualCode";
16752 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16754 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16756 +      filename adjref;
16757 +   %end;
16759 +   /* LEAF */
16760 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16761 +      data _null_;
16762 +        file flowref mod;
16763 +        put 'drop _LEAF_;';
16764 +      run;
16766 +      data _null_;
16767 +        file pubref mod;
16768 +        put 'drop _LEAF_;';
16769 +      run;
16771 +   %end;
16773 +   filename flowref;
16774 +   filename pubref;
16776 +   /* em_metachange code */
16777 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16778 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16779 +   %end;
16781 +   /* variable selection based on importance stat    */
16782 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16783 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16784 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16785 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16786 +     %let obs = %sysfunc(fetch(&dsid));
16787 +     %do %while(&obs=0);
16788 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16789 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16790 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16791 +       %let obs = %sysfunc(fetch(&dsid));
16792 +     %end;
16793 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16794 +   %end;
16796 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16797 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16798 +    %let tree_pred_vars = ;
16799 +    %let tree_pred_lvl =;
16800 +    %let numpred= 0;
16802 +    data _null_;
16803 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16804 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16805 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16806 +     if eof then
16807 +       call symput('numpred', strip(put(_N_, BEST.)));
16808 +    run;
16809 +   %end;
16811 +   %if &numpred ne 0 %then %do;
16812 +    %do i=1 %to &numpred;
16813 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16814 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16815 +    %end;
16816 +   %end;
16818 +   /* determine if multiple targets will be processed */
16819 +   %let em_tree_multipleTargets=N;
16820 +   %let em_tree_numTarget=1;
16821 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16822 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16823 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16824 +         %let em_tree_multipleTargets=N;
16825 +      %end;
16826 +      %else %do;
16827 +        data _null_;
16828 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16829 +          if eof then
16830 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16831 +        run;
16833 +        %if &em_tree_numTarget gt 1 %then %do;
16834 +           %let em_tree_multipleTargets=Y;
16835 +        %end;
16836 +     %end;
16837 +   %end;
16839 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16840 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16842 +      /* variable importance */
16843 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16844 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16846 +         %let validexist=0;
16847 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16848 +           %let validexist=1;
16849 +         %end;
16851 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16852 +         /* and the columns may not be generated                                                                                 */
16853 +         %let em_tree_cvexists=;
16854 +         %let em_tree_surrexists=.;
16855 +         data _null_;
16856 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16857 +            if eof then do ;
16858 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16859 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16860 +            end;
16861 +         run;
16863 +         data &EM_USER_OUTIMPORT;
16864 +            set &EM_USER_OUTIMPORT;
16866 +            /* format columns based on Precison value specified */
16867 +            format importance 15.&EM_PROPERTY_PRECISION
16868 +                 %if &validexist %then %do;
16869 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16870 +                 %end;
16871 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16872 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16873 +                 %end;
16874 +            ;
16875 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16876 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16877 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16878 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16879 +                 %if "&em_tree_surrexists" ne "" %then %do;
16880 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16881 +                 %end;
16882 +                 %if &validexist %then %do;
16883 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16884 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16885 +                 %end;
16886 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16887 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16888 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16889 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16890 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16891 +                 %end;
16892 +            ;
16893 +         run;
16895 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16896 +      %end;
16897 +   %end;
16899 +   %doendm:
16900 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=06Jan2024:00:55:55,
      Create Time=06Jan2024:00:55:55
 
NOTE: 341 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 66.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=06Jan2024:00:55:55,
      Create Time=06Jan2024:00:55:55
 
NOTE: 336 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 66.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 0 observations read from the data set EMWS2.TREE2_QUALITY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12161,
      Last Modified=06Jan2024:00:55:55,
      Create Time=06Jan2024:00:55:55
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11995,
      Last Modified=06Jan2024:00:55:55,
      Create Time=06Jan2024:00:55:55
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_QUALITY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable VIMPORTANCE is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: Variable RATIO is uninitialized.
NOTE: There were 13 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: The data set EMWS2.TREE2_OUTIMPORT has 13 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
16901
16902  *------------------------------------------------------------*;
16903  * End SCORE: Tree2;
16904  *------------------------------------------------------------*;
 
16905  proc sort data=WORK.EM_METACHANGE;
16906  by key uname;
16907  run;
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16908  filename x "C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\CDELTA_TRAIN.sas";
16909  data _null_;
16910  file x;
16911  put 'if upcase(NAME) = "CATEGORY" then do;';
16912  put 'ROLE = "REJECTED";';
16913  put 'end;';
16914  put 'else ';
16915  put 'if upcase(NAME) = "Q_QUALITY" then do;';
16916  put 'ROLE = "ASSESS";';
16917  put 'end;';
16918  put 'else ';
16919  put 'if upcase(NAME) = "TASTERNAME" then do;';
16920  put 'ROLE = "REJECTED";';
16921  put 'end;';
16922  put 'else ';
16923  put 'if upcase(NAME) = "TASTINGDATE" then do;';
16924  put 'ROLE = "REJECTED";';
16925  put 'end;';
16926  put 'else ';
16927  put 'if upcase(NAME) = "_NODE_" then do;';
16928  put 'ROLE = "SEGMENT";';
16929  put 'LEVEL = "NOMINAL";';
16930  put 'end;';
16931  run;
 
NOTE: The file X is:
      Filename=C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=06Jan2024:00:55:55,
      Create Time=27Dec2023:22:13:48
 
NOTE: 20 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 40.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16932  filename x;
NOTE: Fileref X has been deassigned.
 
16933  filename emflow "C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas";
16934  *------------------------------------------------------------*;
16935  * Tree2: Scoring DATA data;
16936  *------------------------------------------------------------*;
16937  data EMWS2.Tree2_TRAIN
16938  / view=EMWS2.Tree2_TRAIN
16939  ;
16940  set EMWS2.Part_TRAIN
16941  ;
16942  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas.
16943 +****************************************************************;
16944 +******             DECISION TREE SCORING CODE             ******;
16945 +****************************************************************;
16946 +
16947 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16948 +LENGTH _WARN_  $    4;
16949 +
16950 +******              LABELS FOR NEW VARIABLES              ******;
16951 +label _NODE_ = 'Node' ;
16952 +label _LEAF_ = 'Leaf' ;
16953 +label P_quality = 'Predicted: quality' ;
16954 +label R_quality = 'Residual: quality' ;
16955 +label _WARN_ = 'Warnings' ;
16956 +
16957 +
16958 +
16959 +******             ASSIGN OBSERVATION TO NODE             ******;
16960 +IF  NOT MISSING(alcohol ) AND
16961 +                10.625 <= alcohol  THEN DO;
16962 +  IF  NOT MISSING(alcohol ) AND
16963 +            11.741666665 <= alcohol  THEN DO;
16964 +    IF  NOT MISSING(free_sulfur_dioxide ) AND
16965 +      free_sulfur_dioxide  <                 21.5 THEN DO;
16966 +      IF  NOT MISSING(sulphates ) AND
16967 +                       0.685 <= sulphates  THEN DO;
16968 +        IF  NOT MISSING(total_sulfur_dioxide ) AND
16969 +                           121 <= total_sulfur_dioxide  THEN DO;
16970 +          _NODE_  =                   49;
16971 +          _LEAF_  =                   35;
16972 +          P_quality  =     5.85714285714285;
16973 +          END;
16974 +        ELSE DO;
16975 +          _NODE_  =                   48;
16976 +          _LEAF_  =                   34;
16977 +          P_quality  =     6.79411764705882;
16978 +          END;
16979 +        END;
16980 +      ELSE DO;
16981 +        IF  NOT MISSING(density ) AND
16982 +          density  <             0.990315 THEN DO;
16983 +          IF  NOT MISSING(sulphates ) AND
16984 +            sulphates  <                0.325 THEN DO;
16985 +            _NODE_  =                   76;
16986 +            _LEAF_  =                   31;
16987 +            P_quality  =     7.66666666666666;
16988 +            END;
16989 +          ELSE DO;
16990 +            _NODE_  =                   77;
16991 +            _LEAF_  =                   32;
16992 +            P_quality  =                  6.4;
16993 +            END;
16994 +          END;
16995 +        ELSE DO;
16996 +          _NODE_  =                   47;
16997 +          _LEAF_  =                   33;
16998 +          P_quality  =       5.920245398773;
16999 +          END;
17000 +        END;
17001 +      END;
17002 +    ELSE DO;
17003 +      IF  NOT MISSING(fixed_acidity ) AND
17004 +                        7.85 <= fixed_acidity  THEN DO;
17005 +        IF  NOT MISSING(volatile_acidity ) AND
17006 +                         0.395 <= volatile_acidity  THEN DO;
17007 +          _NODE_  =                   53;
17008 +          _LEAF_  =                   40;
17009 +          P_quality  =     6.80952380952381;
17010 +          END;
17011 +        ELSE DO;
17012 +          _NODE_  =                   52;
17013 +          _LEAF_  =                   39;
17014 +          P_quality  =     6.14545454545454;
17015 +          END;
17016 +        END;
17017 +      ELSE DO;
17018 +        IF  NOT MISSING(sulphates ) AND
17019 +                         0.475 <= sulphates  THEN DO;
17020 +          _NODE_  =                   51;
17021 +          _LEAF_  =                   38;
17022 +          P_quality  =     6.85526315789473;
17023 +          END;
17024 +        ELSE DO;
17025 +          IF  NOT MISSING(fixed_acidity ) AND
17026 +            fixed_acidity  <                 5.35 THEN DO;
17027 +            _NODE_  =                   78;
17028 +            _LEAF_  =                   36;
17029 +            P_quality  =                 7.25;
17030 +            END;
17031 +          ELSE DO;
17032 +            _NODE_  =                   79;
17033 +            _LEAF_  =                   37;
17034 +            P_quality  =     6.55035971223021;
17035 +            END;
17036 +          END;
17037 +        END;
17038 +      END;
17039 +    END;
17040 +  ELSE DO;
17041 +    IF  NOT MISSING(volatile_acidity ) AND
17042 +                     0.675 <= volatile_acidity  THEN DO;
17043 +      IF  NOT MISSING(volatile_acidity ) AND
17044 +                       1.015 <= volatile_acidity  THEN DO;
17045 +        _NODE_  =                   25;
17046 +        _LEAF_  =                   30;
17047 +        P_quality  =                    4;
17048 +        END;
17049 +      ELSE DO;
17050 +        _NODE_  =                   24;
17051 +        _LEAF_  =                   29;
17052 +        P_quality  =     5.33333333333333;
17053 +        END;
17054 +      END;
17055 +    ELSE DO;
17056 +      IF  NOT MISSING(free_sulfur_dioxide ) AND
17057 +        free_sulfur_dioxide  <                 11.5 THEN DO;
17058 +        IF  NOT MISSING(total_sulfur_dioxide ) AND
17059 +                            36 <= total_sulfur_dioxide  THEN DO;
17060 +          IF  NOT MISSING(alcohol ) AND
17061 +            alcohol  <                11.05 THEN DO;
17062 +            _NODE_  =                   70;
17063 +            _LEAF_  =                   23;
17064 +            P_quality  =     5.44117647058823;
17065 +            END;
17066 +          ELSE DO;
17067 +            _NODE_  =                   71;
17068 +            _LEAF_  =                   24;
17069 +            P_quality  =     4.71428571428571;
17070 +            END;
17071 +          END;
17072 +        ELSE DO;
17073 +          IF  NOT MISSING(volatile_acidity ) AND
17074 +            volatile_acidity  <                0.365 THEN DO;
17075 +            _NODE_  =                   68;
17076 +            _LEAF_  =                   21;
17077 +            P_quality  =              6.59375;
17078 +            END;
17079 +          ELSE DO;
17080 +            _NODE_  =                   69;
17081 +            _LEAF_  =                   22;
17082 +            P_quality  =     5.87096774193548;
17083 +            END;
17084 +          END;
17085 +        END;
17086 +      ELSE DO;
17087 +        IF  NOT MISSING(pH ) AND
17088 +          pH  <                3.245 THEN DO;
17089 +          IF  NOT MISSING(volatile_acidity ) AND
17090 +            volatile_acidity  <                0.195 THEN DO;
17091 +            _NODE_  =                   72;
17092 +            _LEAF_  =                   25;
17093 +            P_quality  =     6.30827067669173;
17094 +            END;
17095 +          ELSE DO;
17096 +            _NODE_  =                   73;
17097 +            _LEAF_  =                   26;
17098 +            P_quality  =     5.96781609195402;
17099 +            END;
17100 +          END;
17101 +        ELSE DO;
17102 +          IF  NOT MISSING(chlorides ) AND
17103 +            chlorides  <               0.0395 THEN DO;
17104 +            _NODE_  =                   74;
17105 +            _LEAF_  =                   27;
17106 +            P_quality  =     6.53205128205128;
17107 +            END;
17108 +          ELSE DO;
17109 +            _NODE_  =                   75;
17110 +            _LEAF_  =                   28;
17111 +            P_quality  =      6.1038961038961;
17112 +            END;
17113 +          END;
17114 +        END;
17115 +      END;
17116 +    END;
17117 +  END;
17118 +ELSE DO;
17119 +  IF  NOT MISSING(volatile_acidity ) AND
17120 +    volatile_acidity  <               0.2425 THEN DO;
17121 +    IF  NOT MISSING(volatile_acidity ) AND
17122 +                    0.2075 <= volatile_acidity  THEN DO;
17123 +      _NODE_  =                    9;
17124 +      _LEAF_  =                    7;
17125 +      P_quality  =     5.69574944071588;
17126 +      END;
17127 +    ELSE DO;
17128 +      IF  NOT MISSING(density ) AND
17129 +                     0.99791 <= density  THEN DO;
17130 +        IF  NOT MISSING(citric_acid ) AND
17131 +                         0.305 <= citric_acid  THEN DO;
17132 +          _NODE_  =                   33;
17133 +          _LEAF_  =                    6;
17134 +          P_quality  =                5.975;
17135 +          END;
17136 +        ELSE DO;
17137 +          IF  NOT MISSING(alcohol ) AND
17138 +                            9.15 <= alcohol  THEN DO;
17139 +            _NODE_  =                   57;
17140 +            _LEAF_  =                    5;
17141 +            P_quality  =                    6;
17142 +            END;
17143 +          ELSE DO;
17144 +            _NODE_  =                   56;
17145 +            _LEAF_  =                    4;
17146 +            P_quality  =     7.23913043478261;
17147 +            END;
17148 +          END;
17149 +        END;
17150 +      ELSE DO;
17151 +        IF  NOT MISSING(free_sulfur_dioxide ) AND
17152 +          free_sulfur_dioxide  <                  6.5 THEN DO;
17153 +          _NODE_  =                   30;
17154 +          _LEAF_  =                    1;
17155 +          P_quality  =     4.42857142857142;
17156 +          END;
17157 +        ELSE DO;
17158 +          IF  NOT MISSING(alcohol ) AND
17159 +                    10.116666665 <= alcohol  THEN DO;
17160 +            _NODE_  =                   55;
17161 +            _LEAF_  =                    3;
17162 +            P_quality  =              6.09375;
17163 +            END;
17164 +          ELSE DO;
17165 +            _NODE_  =                   54;
17166 +            _LEAF_  =                    2;
17167 +            P_quality  =     5.80524344569288;
17168 +            END;
17169 +          END;
17170 +        END;
17171 +      END;
17172 +    END;
17173 +  ELSE DO;
17174 +    IF  NOT MISSING(alcohol ) AND
17175 +                      9.85 <= alcohol  THEN DO;
17176 +      IF  NOT MISSING(sulphates ) AND
17177 +        sulphates  <                0.545 THEN DO;
17178 +        IF  NOT MISSING(free_sulfur_dioxide ) AND
17179 +          free_sulfur_dioxide  <                 25.5 THEN DO;
17180 +          _NODE_  =                   38;
17181 +          _LEAF_  =                   15;
17182 +          P_quality  =     5.21176470588235;
17183 +          END;
17184 +        ELSE DO;
17185 +          IF  NOT MISSING(volatile_acidity ) AND
17186 +                          0.7125 <= volatile_acidity  THEN DO;
17187 +            _NODE_  =                   65;
17188 +            _LEAF_  =                   17;
17189 +            P_quality  =     4.57142857142857;
17190 +            END;
17191 +          ELSE DO;
17192 +            _NODE_  =                   64;
17193 +            _LEAF_  =                   16;
17194 +            P_quality  =     5.62777777777777;
17195 +            END;
17196 +          END;
17197 +        END;
17198 +      ELSE DO;
17199 +        IF  NOT MISSING(pH ) AND
17200 +                         3.535 <= pH  THEN DO;
17201 +          _NODE_  =                   41;
17202 +          _LEAF_  =                   20;
17203 +          P_quality  =                    5;
17204 +          END;
17205 +        ELSE DO;
17206 +          IF  NOT MISSING(total_sulfur_dioxide ) AND
17207 +                             186 <= total_sulfur_dioxide  THEN DO;
17208 +            _NODE_  =                   67;
17209 +            _LEAF_  =                   19;
17210 +            P_quality  =     5.24242424242424;
17211 +            END;
17212 +          ELSE DO;
17213 +            _NODE_  =                   66;
17214 +            _LEAF_  =                   18;
17215 +            P_quality  =     5.78369905956112;
17216 +            END;
17217 +          END;
17218 +        END;
17219 +      END;
17220 +    ELSE DO;
17221 +      IF  NOT MISSING(volatile_acidity ) AND
17222 +                      0.4225 <= volatile_acidity  THEN DO;
17223 +        IF  NOT MISSING(sulphates ) AND
17224 +          sulphates  <                0.535 THEN DO;
17225 +          _NODE_  =                   36;
17226 +          _LEAF_  =                   12;
17227 +          P_quality  =     4.96059113300492;
17228 +          END;
17229 +        ELSE DO;
17230 +          IF  NOT MISSING(total_sulfur_dioxide ) AND
17231 +            total_sulfur_dioxide  <                 46.5 THEN DO;
17232 +            _NODE_  =                   62;
17233 +            _LEAF_  =                   13;
17234 +            P_quality  =     5.38235294117647;
17235 +            END;
17236 +          ELSE DO;
17237 +            _NODE_  =                   63;
17238 +            _LEAF_  =                   14;
17239 +            P_quality  =     5.11290322580645;
17240 +            END;
17241 +          END;
17242 +        END;
17243 +      ELSE DO;
17244 +        IF  NOT MISSING(citric_acid ) AND
17245 +          citric_acid  <                0.265 THEN DO;
17246 +          IF  NOT MISSING(pH ) AND
17247 +                           3.485 <= pH  THEN DO;
17248 +            _NODE_  =                   59;
17249 +            _LEAF_  =                    9;
17250 +            P_quality  =                    4;
17251 +            END;
17252 +          ELSE DO;
17253 +            _NODE_  =                   58;
17254 +            _LEAF_  =                    8;
17255 +            P_quality  =     5.16788321167883;
17256 +            END;
17257 +          END;
17258 +        ELSE DO;
17259 +          IF  NOT MISSING(volatile_acidity ) AND
17260 +            volatile_acidity  <                0.275 THEN DO;
17261 +            _NODE_  =                   60;
17262 +            _LEAF_  =                   10;
17263 +            P_quality  =     5.60693641618497;
17264 +            END;
17265 +          ELSE DO;
17266 +            _NODE_  =                   61;
17267 +            _LEAF_  =                   11;
17268 +            P_quality  =     5.35933806146572;
17269 +            END;
17270 +          END;
17271 +        END;
17272 +      END;
17273 +    END;
17274 +  END;
17275 +
17276 +*****  RESIDUALS R_ *************;
17277 +IF MISSING( quality ) THEN R_quality  = .;
17278 +ELSE R_quality  = quality  - P_quality ;
17279 +
17280 +****************************************************************;
17281 +******          END OF DECISION TREE SCORING CODE         ******;
17282 +****************************************************************;
17283 +
17284 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17285  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17286  quit;
17287  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17288  filename emflow "C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas";
17289  *------------------------------------------------------------*;
17290  * Tree2: Scoring TEST data;
17291  *------------------------------------------------------------*;
17292  data EMWS2.Tree2_TEST
17293  / view=EMWS2.Tree2_TEST
17294  ;
17295  set EMWS2.Part_TEST
17296  ;
17297  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Oscar\Documents\Document\File need to backup\UM\Y4S1\Data Mining and Warehousing\GroupAssignment\GroupAssignment_2023\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas.
17298 +****************************************************************;
17299 +******             DECISION TREE SCORING CODE             ******;
17300 +****************************************************************;
17301 +
17302 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17303 +LENGTH _WARN_  $    4;
17304 +
17305 +******              LABELS FOR NEW VARIABLES              ******;
17306 +label _NODE_ = 'Node' ;
17307 +label _LEAF_ = 'Leaf' ;
17308 +label P_quality = 'Predicted: quality' ;
17309 +label R_quality = 'Residual: quality' ;
17310 +label _WARN_ = 'Warnings' ;
17311 +
17312 +
17313 +
17314 +******             ASSIGN OBSERVATION TO NODE             ******;
17315 +IF  NOT MISSING(alcohol ) AND
17316 +                10.625 <= alcohol  THEN DO;
17317 +  IF  NOT MISSING(alcohol ) AND
17318 +            11.741666665 <= alcohol  THEN DO;
17319 +    IF  NOT MISSING(free_sulfur_dioxide ) AND
17320 +      free_sulfur_dioxide  <                 21.5 THEN DO;
17321 +      IF  NOT MISSING(sulphates ) AND
17322 +                       0.685 <= sulphates  THEN DO;
17323 +        IF  NOT MISSING(total_sulfur_dioxide ) AND
17324 +                           121 <= total_sulfur_dioxide  THEN DO;
17325 +          _NODE_  =                   49;
17326 +          _LEAF_  =                   35;
17327 +          P_quality  =     5.85714285714285;
17328 +          END;
17329 +        ELSE DO;
17330 +          _NODE_  =                   48;
17331 +          _LEAF_  =                   34;
17332 +          P_quality  =     6.79411764705882;
17333 +          END;
17334 +        END;
17335 +      ELSE DO;
17336 +        IF  NOT MISSING(density ) AND
17337 +          density  <             0.990315 THEN DO;
17338 +          IF  NOT MISSING(sulphates ) AND
17339 +            sulphates  <                0.325 THEN DO;
17340 +            _NODE_  =                   76;
17341 +            _LEAF_  =                   31;
17342 +            P_quality  =     7.66666666666666;
17343 +            END;
17344 +          ELSE DO;
17345 +            _NODE_  =                   77;
17346 +            _LEAF_  =                   32;
17347 +            P_quality  =                  6.4;
17348 +            END;
17349 +          END;
17350 +        ELSE DO;
17351 +          _NODE_  =                   47;
17352 +          _LEAF_  =                   33;
17353 +          P_quality  =       5.920245398773;
17354 +          END;
17355 +        END;
17356 +      END;
17357 +    ELSE DO;
17358 +      IF  NOT MISSING(fixed_acidity ) AND
17359 +                        7.85 <= fixed_acidity  THEN DO;
17360 +        IF  NOT MISSING(volatile_acidity ) AND
17361 +                         0.395 <= volatile_acidity  THEN DO;
17362 +          _NODE_  =                   53;
17363 +          _LEAF_  =                   40;
17364 +          P_quality  =     6.80952380952381;
17365 +          END;
17366 +        ELSE DO;
17367 +          _NODE_  =                   52;
17368 +          _LEAF_  =                   39;
17369 +          P_quality  =     6.14545454545454;
17370 +          END;
17371 +        END;
17372 +      ELSE DO;
17373 +        IF  NOT MISSING(sulphates ) AND
17374 +                         0.475 <= sulphates  THEN DO;
17375 +          _NODE_  =                   51;
17376 +          _LEAF_  =                   38;
17377 +          P_quality  =     6.85526315789473;
17378 +          END;
17379 +        ELSE DO;
17380 +          IF  NOT MISSING(fixed_acidity ) AND
17381 +            fixed_acidity  <                 5.35 THEN DO;
17382 +            _NODE_  =                   78;
17383 +            _LEAF_  =                   36;
17384 +            P_quality  =                 7.25;
17385 +            END;
17386 +          ELSE DO;
17387 +            _NODE_  =                   79;
17388 +            _LEAF_  =                   37;
17389 +            P_quality  =     6.55035971223021;
17390 +            END;
17391 +          END;
17392 +        END;
17393 +      END;
17394 +    END;
17395 +  ELSE DO;
17396 +    IF  NOT MISSING(volatile_acidity ) AND
17397 +                     0.675 <= volatile_acidity  THEN DO;
17398 +      IF  NOT MISSING(volatile_acidity ) AND
17399 +                       1.015 <= volatile_acidity  THEN DO;
17400 +        _NODE_  =                   25;
17401 +        _LEAF_  =                   30;
17402 +        P_quality  =                    4;
17403 +        END;
17404 +      ELSE DO;
17405 +        _NODE_  =                   24;
17406 +        _LEAF_  =                   29;
17407 +        P_quality  =     5.33333333333333;
17408 +        END;
17409 +      END;
17410 +    ELSE DO;
17411 +      IF  NOT MISSING(free_sulfur_dioxide ) AND
17412 +        free_sulfur_dioxide  <                 11.5 THEN DO;
17413 +        IF  NOT MISSING(total_sulfur_dioxide ) AND
17414 +                            36 <= total_sulfur_dioxide  THEN DO;
17415 +          IF  NOT MISSING(alcohol ) AND
17416 +            alcohol  <                11.05 THEN DO;
17417 +            _NODE_  =                   70;
17418 +            _LEAF_  =                   23;
17419 +            P_quality  =     5.44117647058823;
17420 +            END;
17421 +          ELSE DO;
17422 +            _NODE_  =                   71;
17423 +            _LEAF_  =                   24;
17424 +            P_quality  =     4.71428571428571;
17425 +            END;
17426 +          END;
17427 +        ELSE DO;
17428 +          IF  NOT MISSING(volatile_acidity ) AND
17429 +            volatile_acidity  <                0.365 THEN DO;
17430 +            _NODE_  =                   68;
17431 +            _LEAF_  =                   21;
17432 +            P_quality  =              6.59375;
17433 +            END;
17434 +          ELSE DO;
17435 +            _NODE_  =                   69;
17436 +            _LEAF_  =                   22;
17437 +            P_quality  =     5.87096774193548;
17438 +            END;
17439 +          END;
17440 +        END;
17441 +      ELSE DO;
17442 +        IF  NOT MISSING(pH ) AND
17443 +          pH  <                3.245 THEN DO;
17444 +          IF  NOT MISSING(volatile_acidity ) AND
17445 +            volatile_acidity  <                0.195 THEN DO;
17446 +            _NODE_  =                   72;
17447 +            _LEAF_  =                   25;
17448 +            P_quality  =     6.30827067669173;
17449 +            END;
17450 +          ELSE DO;
17451 +            _NODE_  =                   73;
17452 +            _LEAF_  =                   26;
17453 +            P_quality  =     5.96781609195402;
17454 +            END;
17455 +          END;
17456 +        ELSE DO;
17457 +          IF  NOT MISSING(chlorides ) AND
17458 +            chlorides  <               0.0395 THEN DO;
17459 +            _NODE_  =                   74;
17460 +            _LEAF_  =                   27;
17461 +            P_quality  =     6.53205128205128;
17462 +            END;
17463 +          ELSE DO;
17464 +            _NODE_  =                   75;
17465 +            _LEAF_  =                   28;
17466 +            P_quality  =      6.1038961038961;
17467 +            END;
17468 +          END;
17469 +        END;
17470 +      END;
17471 +    END;
17472 +  END;
17473 +ELSE DO;
17474 +  IF  NOT MISSING(volatile_acidity ) AND
17475 +    volatile_acidity  <               0.2425 THEN DO;
17476 +    IF  NOT MISSING(volatile_acidity ) AND
17477 +                    0.2075 <= volatile_acidity  THEN DO;
17478 +      _NODE_  =                    9;
17479 +      _LEAF_  =                    7;
17480 +      P_quality  =     5.69574944071588;
17481 +      END;
17482 +    ELSE DO;
17483 +      IF  NOT MISSING(density ) AND
17484 +                     0.99791 <= density  THEN DO;
17485 +        IF  NOT MISSING(citric_acid ) AND
17486 +                         0.305 <= citric_acid  THEN DO;
17487 +          _NODE_  =                   33;
17488 +          _LEAF_  =                    6;
17489 +          P_quality  =                5.975;
17490 +          END;
17491 +        ELSE DO;
17492 +          IF  NOT MISSING(alcohol ) AND
17493 +                            9.15 <= alcohol  THEN DO;
17494 +            _NODE_  =                   57;
17495 +            _LEAF_  =                    5;
17496 +            P_quality  =                    6;
17497 +            END;
17498 +          ELSE DO;
17499 +            _NODE_  =                   56;
17500 +            _LEAF_  =                    4;
17501 +            P_quality  =     7.23913043478261;
17502 +            END;
17503 +          END;
17504 +        END;
17505 +      ELSE DO;
17506 +        IF  NOT MISSING(free_sulfur_dioxide ) AND
17507 +          free_sulfur_dioxide  <                  6.5 THEN DO;
17508 +          _NODE_  =                   30;
17509 +          _LEAF_  =                    1;
17510 +          P_quality  =     4.42857142857142;
17511 +          END;
17512 +        ELSE DO;
17513 +          IF  NOT MISSING(alcohol ) AND
17514 +                    10.116666665 <= alcohol  THEN DO;
17515 +            _NODE_  =                   55;
17516 +            _LEAF_  =                    3;
17517 +            P_quality  =              6.09375;
17518 +            END;
17519 +          ELSE DO;
17520 +            _NODE_  =                   54;
17521 +            _LEAF_  =                    2;
17522 +            P_quality  =     5.80524344569288;
17523 +            END;
17524 +          END;
17525 +        END;
17526 +      END;
17527 +    END;
17528 +  ELSE DO;
17529 +    IF  NOT MISSING(alcohol ) AND
17530 +                      9.85 <= alcohol  THEN DO;
17531 +      IF  NOT MISSING(sulphates ) AND
17532 +        sulphates  <                0.545 THEN DO;
17533 +        IF  NOT MISSING(free_sulfur_dioxide ) AND
17534 +          free_sulfur_dioxide  <                 25.5 THEN DO;
17535 +          _NODE_  =                   38;
17536 +          _LEAF_  =                   15;
17537 +          P_quality  =     5.21176470588235;
17538 +          END;
17539 +        ELSE DO;
17540 +          IF  NOT MISSING(volatile_acidity ) AND
17541 +                          0.7125 <= volatile_acidity  THEN DO;
17542 +            _NODE_  =                   65;
17543 +            _LEAF_  =                   17;
17544 +            P_quality  =     4.57142857142857;
17545 +            END;
17546 +          ELSE DO;
17547 +            _NODE_  =                   64;
17548 +            _LEAF_  =                   16;
17549 +            P_quality  =     5.62777777777777;
17550 +            END;
17551 +          END;
17552 +        END;
17553 +      ELSE DO;
17554 +        IF  NOT MISSING(pH ) AND
17555 +                         3.535 <= pH  THEN DO;
17556 +          _NODE_  =                   41;
17557 +          _LEAF_  =                   20;
17558 +          P_quality  =                    5;
17559 +          END;
17560 +        ELSE DO;
17561 +          IF  NOT MISSING(total_sulfur_dioxide ) AND
17562 +                             186 <= total_sulfur_dioxide  THEN DO;
17563 +            _NODE_  =                   67;
17564 +            _LEAF_  =                   19;
17565 +            P_quality  =     5.24242424242424;
17566 +            END;
17567 +          ELSE DO;
17568 +            _NODE_  =                   66;
17569 +            _LEAF_  =                   18;
17570 +            P_quality  =     5.78369905956112;
17571 +            END;
17572 +          END;
17573 +        END;
17574 +      END;
17575 +    ELSE DO;
17576 +      IF  NOT MISSING(volatile_acidity ) AND
17577 +                      0.4225 <= volatile_acidity  THEN DO;
17578 +        IF  NOT MISSING(sulphates ) AND
17579 +          sulphates  <                0.535 THEN DO;
17580 +          _NODE_  =                   36;
17581 +          _LEAF_  =                   12;
17582 +          P_quality  =     4.96059113300492;
17583 +          END;
17584 +        ELSE DO;
17585 +          IF  NOT MISSING(total_sulfur_dioxide ) AND
17586 +            total_sulfur_dioxide  <                 46.5 THEN DO;
17587 +            _NODE_  =                   62;
17588 +            _LEAF_  =                   13;
17589 +            P_quality  =     5.38235294117647;
17590 +            END;
17591 +          ELSE DO;
17592 +            _NODE_  =                   63;
17593 +            _LEAF_  =                   14;
17594 +            P_quality  =     5.11290322580645;
17595 +            END;
17596 +          END;
17597 +        END;
17598 +      ELSE DO;
17599 +        IF  NOT MISSING(citric_acid ) AND
17600 +          citric_acid  <                0.265 THEN DO;
17601 +          IF  NOT MISSING(pH ) AND
17602 +                           3.485 <= pH  THEN DO;
17603 +            _NODE_  =                   59;
17604 +            _LEAF_  =                    9;
17605 +            P_quality  =                    4;
17606 +            END;
17607 +          ELSE DO;
17608 +            _NODE_  =                   58;
17609 +            _LEAF_  =                    8;
17610 +            P_quality  =     5.16788321167883;
17611 +            END;
17612 +          END;
17613 +        ELSE DO;
17614 +          IF  NOT MISSING(volatile_acidity ) AND
17615 +            volatile_acidity  <                0.275 THEN DO;
17616 +            _NODE_  =                   60;
17617 +            _LEAF_  =                   10;
17618 +            P_quality  =     5.60693641618497;
17619 +            END;
17620 +          ELSE DO;
17621 +            _NODE_  =                   61;
17622 +            _LEAF_  =                   11;
17623 +            P_quality  =     5.35933806146572;
17624 +            END;
17625 +          END;
17626 +        END;
17627 +      END;
17628 +    END;
17629 +  END;
17630 +
17631 +*****  RESIDUALS R_ *************;
17632 +IF MISSING( quality ) THEN R_quality  = .;
17633 +ELSE R_quality  = quality  - P_quality ;
17634 +
17635 +****************************************************************;
17636 +******          END OF DECISION TREE SCORING CODE         ******;
17637 +****************************************************************;
17638 +
17639 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17640  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE2_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17641  quit;
17642  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
17644  proc sort data=WORK.EM_USER_REPORT;
17645  by ID VIEW;
17646  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17647  *------------------------------------------------------------*;
17648  * Tree2: Computing metadata for TRAIN data;
17649  *------------------------------------------------------------*;
 
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
18016  data WORK.MODELTEMP_INFO;
18017  set EMWS2.Tree2_EMINFO;
18018  where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18019  run;
 
NOTE: There were 0 observations read from the data set EMWS2.TREE2_EMINFO.
      WHERE (DATA='Tree2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18020  data EMWS2.Tree2_EMINFO;
18021  length TARGET KEY $32 DATA $43;
18022  input TARGET KEY DATA $;
18023  cards;
 
NOTE: The data set EMWS2.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18027  run;
18028  data EMWS2.Tree2_EMINFO;
18029  set EMWS2.Tree2_EMINFO WORK.MODELTEMP_INFO;
18030  run;
 
NOTE: There were 3 observations read from the data set EMWS2.TREE2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS2.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18031  proc sort data = EMWS2.Tree2_EMINFO NOTHREADS;
18032  by TARGET KEY;
18033  run;
 
NOTE: There were 3 observations read from the data set EMWS2.TREE2_EMINFO.
NOTE: The data set EMWS2.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS2.TREE2_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                January 06, 2024
Time:                00:55:56
*------------------------------------------------------------*
18057  data EMWS2.Tree2_EMOUTFIT;
18058  set EMWS2.Tree2_EMOUTFIT;
18059  length TargetLabel $200;
18060  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18061  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS2.TREE2_EMOUTFIT.
NOTE: The data set EMWS2.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18062  proc sort data=EMWS2.Tree2_EMREPORTFIT nothreads;
18063  by TARGET;
18064  run;
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_EMREPORTFIT.
NOTE: The data set EMWS2.TREE2_EMREPORTFIT has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18065  %let _EMwarndup = 0;
18066  %let _EMtargetdup =;
18067  %let _EMASEtargetdup =;
18068  data _null_;
18069  set EMWS2.Tree2_EMOUTFIT;
18070  if .<_ASE_<0.000001 then do;
18071  call symput('_EMwarndup', '1');
18072  call symput('_EMtargetdup', target);
18073  call symput('_EMASEtargetdup', put(_ASE_, best.));
18074  end;
18075  run;
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18076  %let EMEXCEPTIONSTRING=;
18077  *------------------------------------------------------------*;
18078  * REPORT: Tree2;
18079  *------------------------------------------------------------*;
18080  %let EM_ACTION = REPORT;
18081  %let syscc = 0;
18082  %macro main;
18083
18084    %if %upcase(&EM_ACTION) = CREATE %then %do;
18085      filename temp catalog 'sashelp.emmodl.tree_create.source';
18086      %include temp;
18087      filename temp;
18088
18089      %em_tree_create;
18090    %end;
18091
18092     %else
18093     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18094
18095         filename temp catalog 'sashelp.emmodl.tree_train.source';
18096         %include temp;
18097         filename temp;
18098         %em_tree_train;
18099     %end;
18100
18101    %else
18102    %if %upcase(&EM_ACTION) = SCORE %then %do;
18103      filename temp catalog 'sashelp.emmodl.tree_score.source';
18104      %include temp;
18105      filename temp;
18106
18107      %em_tree_score;
18108
18109    %end;
18110
18111    %else
18112    %if %upcase(&EM_ACTION) = REPORT %then %do;
18113
18114         filename temp catalog 'sashelp.emmodl.tree_report.source';
18115         %include temp;
18116         filename temp;
18117
18118         %em_tree_report;
18119     %end;
18120
18121    %else
18122    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18123
18124         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18125         %include temp;
18126         filename temp;
18127         %EM_TREE_OPENTREEVIEWER;
18128
18129     %end;
18130
18131    %else
18132    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18133
18134         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18135         %include temp;
18136         filename temp;
18137         %EM_TREE_CLOSETREEVIEWER;
18138
18139     %end;
18140
18141
18142     %doendm:
18143  %mend main;
18144
18145  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18147 +%macro em_tree_makePlotDs( multipleTar= );
18149 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18150 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18151 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18152 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18154 +  /* determine if validation statistics will be displayed */
18155 +  %let validflag=N;
18156 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18157 +    /* determine if validation data exists */
18158 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18159 +      %let validflag=Y;
18160 +    %end;
18161 +  %end;
18163 +   /* retrieve name of decmeta even in presence of multiple targets */
18164 +   %let decmeta = ;
18165 +   %if &EM_DEC_DECMETA eq %then %do;
18166 +     data _Target;
18167 +       set &em_data_variableset;
18168 +       where ROLE='TARGET' and USE in('D', 'Y');
18169 +       keep NAME;
18170 +     run;
18171 +     proc sort data=_Target;
18172 +       by NAME;
18173 +     run;
18174 +     proc sort data=EM_TARGETDECINFO;
18175 +       by TARGET;
18176 +     run;
18177 +     data _Target;
18178 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18179 +       by NAME;
18180 +       if _a then do;
18181 +         call symput('decmeta', trim(DECMETA));
18182 +       end;
18183 +     run;
18184 +     proc delete data=_Target;run;
18185 +   %end;
18186 +   %else %let decmeta = &EM_DEC_DECMETA;
18189 +  /* retrieve targetEvent from decmeta */
18190 +  %let targetEvent=;
18191 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18192 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18193 +      data _null_;
18194 +       set &DECMETA(where=(_TYPE_="TARGET"));
18195 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18196 +      run;
18197 +    %end;
18198 +  %end;
18200 +  /* retrieve predicted var for targetEvent from decmeta */
18201 +  %let predTarget=;
18202 +  %let predLvl=;
18203 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18204 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18205 +      data _null_;
18206 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18207 +       call symput('predTarget', strip(VARIABLE));
18208 +       call symput('predLvl', strip(LEVEL));
18209 +      run;
18210 +    %end;
18211 +  %end;
18212 +  %else %do;
18213 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18214 +      data _null_;
18215 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18216 +       call symput('predTarget', strip(VARIABLE));
18217 +      run;
18218 +    %end;
18219 +  %end;
18221 +  /* create BelowText value */
18222 +  data belowtext;
18223 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18224 +    keep node belowtext;
18225 +  run;
18227 +  /* relace belowtext with variable label if it exists */
18228 +  data belowtext2;
18229 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18230 +    keep node belowtextlbl;
18231 +  run;
18233 +  proc sort data=belowtext; by node; run;
18234 +  proc sort data=belowtext2; by node; run;
18236 +  data belowtext;
18237 +    merge belowtext belowtext2(in=_a);
18238 +    by node;
18239 +    if _a then belowtext=belowtextlbl;
18240 +    keep node belowtext;
18241 +  run;
18243 +  /* create AboveText value */
18244 +  data abovetext;
18245 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18246 +  run;
18247 +  proc sort data=abovetext; by node numeric_value; run;
18249 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18250 +  data abovetext;
18251 +    set abovetext(rename=(node=parent));
18252 +    by parent numeric_value;
18253 +    retain abovetext tempstring flag branch origval origchar ;
18254 +    length abovetext $256;
18255 +    length tempstring origchar $64;
18257 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18258 +      if first.parent then do;
18259 +        if missing(character_value) then do;
18260 +          numeric_value = round(numeric_value, &sp_precision);
18261 +          abovetext = "< "||strip(NUMERIC_VALUE);
18262 +          branch = 1;
18263 +          origval = numeric_value;
18264 +          output;
18265 +        end;
18266 +        else do;
18267 +          abovetext = "< "||strip(CHARACTER_VALUE);
18268 +          branch = 1;
18269 +          origchar = character_value;
18270 +          output;
18271 +        end;
18273 +        if first.parent AND last.parent then do;
18274 +          if missing(character_value) then do;
18275 +            numeric_value = round(numeric_value, &sp_precision);
18276 +            branch = branch + 1;
18277 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18278 +            output;
18279 +          end;
18280 +          else do;
18281 +            branch = branch + 1;
18282 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18283 +            output;
18284 +          end;
18285 +        end;
18286 +      end;
18287 +      else if last.parent then do;
18288 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18289 +          if missing(character_value) then do;
18290 +            numeric_value = round(numeric_value, &sp_precision);
18291 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18292 +          end;
18293 +          else do;
18294 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18295 +          end;
18296 +          branch = branch + 1;
18297 +          output;
18299 +          if missing(character_value) then do;
18300 +            numeric_value = round(numeric_value, &sp_precision);
18301 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18302 +          end;
18303 +          else do;
18304 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18305 +          end;
18306 +          branch = branch + 1;
18307 +          output;
18308 +        end;
18309 +        else do;
18310 +          if missing(character_value) then do;
18311 +            numeric_value = round(numeric_value, &sp_precision);
18312 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18313 +          end;
18314 +          else do;
18315 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18316 +          end;
18317 +          branch = branch + 1;
18318 +          output;
18319 +        end;
18320 +      end;
18321 +      else do;
18322 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18323 +          if missing(character_value) then do;
18324 +            numeric_value = round(numeric_value,&sp_precision);
18325 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18326 +            origval = numeric_value;
18327 +          end;
18328 +          else do;
18329 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18330 +            origchar = character_value;
18331 +          end;
18332 +          branch = branch + 1;
18333 +          output;
18335 +        end;
18336 +        else do;
18337 +          if missing(character_value) then do;
18338 +            numeric_value = round(numeric_value, &sp_precision);
18339 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18340 +            origval = numeric_value;
18341 +          end;
18342 +          else do;
18343 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18344 +            origval = character_value;
18345 +          end;
18346 +          branch = branch + 1;
18347 +          output;
18348 +        end;
18349 +      end;
18350 +    end;
18351 +    else do;
18352 +       if first.numeric_value then do;
18353 +         flag = 0;
18354 +         abovetext = strip(CHARACTER_VALUE);
18355 +         branch = numeric_value;
18356 +         if first.numeric_value AND last.numeric_value then do;
18357 +           output;
18358 +         end;
18359 +       end;
18360 +       else if last.numeric_value then do;
18361 +         if flag=0 then do;
18362 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18363 +           length = length(strip(tempstring));
18364 +           if length < 32 then do;
18365 +             abovetext = strip(tempstring);
18366 +           end;
18367 +           else do;
18368 +             abovetext = strip(abovetext)||", ...";
18369 +             flag = 1;
18370 +           end;
18371 +         end;
18372 +         branch = numeric_value;
18373 +         output;
18374 +       end;
18375 +       else do;
18376 +         if flag=0 then do;
18377 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18378 +           length = length(strip(tempstring));
18379 +           if length < 32 then do;
18380 +             abovetext = strip(tempstring);
18381 +           end;
18382 +           else do;
18383 +             abovetext = strip(abovetext)||", ...";
18384 +             flag=1;
18385 +           end;
18386 +         end;
18387 +         branch = numeric_value;
18388 +       end;
18389 +    end;
18390 +    keep parent branch abovetext;
18391 +  run;
18393 +  /* MIssing value to abovetext */
18394 +  data tempmissing;
18395 +    set &EM_USER_OUTRULES;
18396 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18397 +    rename node=parent numeric_value=branch character_value=misschar;
18398 +  run;
18401 +  proc sort data=abovetext; by parent branch; run;
18402 +  proc sort data=tempmissing; by parent branch; run;
18403 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18405 +  data tempoutnodes;
18406 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18407 +    by parent branch;
18408 +    length traintotal validtotal 8;
18409 +    retain traintotal validtotal;
18411 +    if _a then do;
18412 +      if ^MISSING(abovetext) then do;
18413 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18414 +      end;
18415 +      else do;
18416 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18417 +      end;
18418 +    end;
18419 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18421 +    if node=1 then do;
18422 +      traintotal = N;
18423 +      validtotal=VN;
18424 +    end;
18426 +    drop role rank stat misschar belowtext;
18427 +  run;
18428 +  proc sort data=tempoutnodes; by node; run;
18429 +  proc sort data=belowtext; by node; run;
18431 +  data tempoutnodes;
18432 +    merge tempoutnodes belowtext;
18433 +    by node;
18435 +  run;
18437 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18438 +  %let adjusted = N;
18439 +  %let npriors = 0;
18440 +  data _null_ ;
18441 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18442 +    if eof then do ;
18443 +      call symput("npriors" , strip(put(_N_,best.))) ;
18444 +    end;
18445 +  run;
18446 +  %if &npriors gt 0 %then %let adjusted=Y;
18449 +  /* create a table with targetUsed and targetLevel columns for each node */
18450 +  data temptarmeta;
18451 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18452 +    %if &multipleTar eq N %then %do;
18453 +      AND USE in ('D', 'Y')
18454 +    %end;
18455 +    ));
18456 +    length TARGET $32;
18457 +    Target=name;
18458 +    keep target level;
18459 +  run;
18461 +  %if &multipleTar eq Y %then %do;
18462 +    data temptargetused;
18463 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18464 +      keep node target;
18465 +    run;
18466 +    proc sort data=temptargetused; by target; run;
18467 +    proc sort data=temptarmeta; by target; run;
18468 +    data temptargetused;
18469 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18470 +      by target;
18471 +      if _a and _b;
18472 +    run;
18473 +  %end;
18474 +  %else %do;
18475 +    data temptargetused;
18476 +      set &EM_USER_OUTSTATS;
18477 +      length target $32 tarlevel $10;
18478 +      target="%EM_TARGET";
18479 +      tarlevel="%EM_TARGET_LEVEL";
18480 +      keep node target tarlevel;
18481 +    run;
18482 +    proc sort data=temptargetused nodupkey; by node; run;
18483 +  %end;
18485 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18486 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18487 +  proc sort data=temptargetused; by node; run;
18490 +  /* create tables for all interval targets as well as all class targets */
18491 +  data tempinterval tempclass;
18492 +    merge tempoutstats temptargetused( rename=(target=targetused));
18493 +    by node;
18494 +    %if "&multipleTar" eq "Y" %then %do;
18495 +      if ((missing(Target)) OR (target=targetused ));
18496 +    %end;
18498 +    if tarlevel="INTERVAL" then output tempinterval;
18499 +    else output tempclass;
18500 +  run;
18502 +  /* iniitalize intTarget and classTarget flags */
18503 +  %let em_intNobs =0;
18504 +  %let em_classNobs = 0;
18505 +  %let em_intTarget= N;
18506 +  %let em_classTarget= N;
18508 +  proc sql;
18509 +    reset noprint;
18510 +    select count(*) into :em_intNobs from tempinterval;
18511 +  quit;
18512 +  proc sql;
18513 +    reset noprint;
18514 +    select count(*) into :em_classNobs from tempclass;
18515 +  quit;
18517 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18518 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18520 +  /* retrieve all information for interval targets */
18521 +  %if &em_intTarget eq Y %then %do;
18523 +    /* determine if leaf variable exists */
18524 +    %let dsid=%sysfunc(open(tempinterval,i));
18525 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18526 +    %let rc=%sysfunc(close(&dsid));
18528 +    proc transpose data=tempinterval
18529 +      %if &leafexists %then %do;
18530 +        (drop=leaf)
18531 +      %end;
18532 +      %if &validexist %then %do;
18533 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18534 +      %end;
18535 +      %else %do;
18536 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18537 +      %end;
18538 +      by node;
18539 +      id statname;
18540 +    run;
18541 +    data tempinterval;
18542 +      set tempinterval;
18543 +      if missing(N) then delete;
18544 +    run;
18545 +  %end;
18547 +  /* retrieve all information for class targets */
18548 +  %if &em_classTarget eq Y %then %do;
18549 +    proc sort data=tempclass; by node category; run;
18550 +    %if &validflag eq N %then %do;
18551 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18552 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18553 +    %end;
18554 +    %else %do;
18555 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18556 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18557 +    %end;
18558 +      set tempclass;
18560 +      %if &validflag eq N %then %do;
18561 +        %if "&adjusted" eq "N" %then %do;
18562 +          if statname="N" then output tempn;
18563 +        %end;
18564 +        %else %do;
18565 +          if statname="NPRIORS" then output tempn;
18566 +        %end;
18567 +        else if statname="PREDICTION" then output temppredict;
18568 +        else if statname="PROBABILITY" then output tempprob;
18569 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18570 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18571 +      %end;
18572 +      %else %do;
18573 +        %if "&adjusted" eq "N" %then %do;
18574 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18575 +        %end;
18576 +        %else %do;
18577 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18578 +        %end;
18579 +        else if statname="PREDICTION" then output temppredict;
18580 +        else if statname="PROBABILITY" then output tempprob;
18581 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18582 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18583 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18584 +      %end;
18585 +    run;
18588 +    /* determine if profit/loss exists in tempprofit */
18589 +    %let em_profitflag=0;
18590 +    %let em_lossflag=0;
18591 +    proc sql;
18592 +      reset noprint;
18593 +      select count(*) into :em_profitflag from tempprofit;
18594 +    quit;
18595 +    proc sql;
18596 +      reset noprint;
18597 +      select count(*) into :em_lossflag from temploss;
18598 +    quit;
18600 +    %if &validFlag eq Y %then %do;
18601 +      proc transpose data=tempn
18602 +        %if "&adjusted" eq "N" %then %do;
18603 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18604 +        %end;
18605 +        %else %do;
18606 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18607 +        %end;
18608 +        by node;
18609 +        id statname;
18610 +      run;
18611 +      %if &em_profitflag ne 0 %then %do;
18612 +        proc transpose data=tempprofit out=tempprofit;
18613 +          by node category;
18614 +          id statname ;
18615 +        run;
18616 +      %end;
18617 +      %if &em_lossflag ne 0 %then %do;
18618 +        proc transpose data=temploss out=temploss;
18619 +          by node category;
18620 +          id statname ;
18621 +        run;
18622 +      %end;
18623 +      data tempprob;
18624 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18625 +        by node
18626 +        %if &multipleTar eq Y %then %do;
18627 +          target
18628 +        %end;
18629 +        category;
18630 +      run;
18631 +    %end;
18633 +    /* store percentcorrect value */
18634 +    data temppredict;
18635 +      merge tempprob temppredict(in=_a);
18636 +      by node category;
18637 +      if _a then do;
18638 +        percentCorrect = statvalue;
18639 +        %if &validFlag eq Y %then %do;
18640 +          vpercentCorrect= vstatvalue;
18641 +        %end;
18642 +      end;
18643 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18644 +      %if &validFlag eq Y %then %do;
18645 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18646 +      %end;
18647 +      ;
18648 +      if missing(percentCorrect) then delete;
18649 +      drop target;
18650 +    run;
18652 +    /* build profittext */
18653 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18654 +      data tempprofittext(keep= node profittext profitloss);
18655 +        length profittext $800 profitloss 8.;
18656 +        retain profittext profitloss;
18658 +        merge tempprob
18659 +        %if &em_profitflag ne 0 %then %do;
18660 +          tempprofit
18661 +        %end;
18662 +        %else %if &em_lossflag ne 0 %then %do;
18663 +          temploss
18664 +        %end;
18665 +        ;
18666 +        by node category;
18668 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18669 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18670 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18671 +          %let profittype = ALL;
18672 +        %end;
18674 +        /* create the profitloss variable for nodecolor if selected */
18675 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18677 +        %if "&profittype" eq "ALL" %then %do;
18678 +          if strip(CATEGORY)="&targetEvent" then do;
18679 +            profitloss=statvalue;
18680 +          end;
18681 +          if first.node then do;
18682 +            %if &validFlag eq N %then %do;
18683 +             %if &em_profitflag ne 0 %then %do;
18684 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18685 +             %end;
18686 +             %if &em_lossflag ne 0 %then %do;
18687 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18688 +             %end;
18689 +            %end;
18690 +            %else %do;
18691 +             %if &em_profitflag ne 0 %then %do;
18692 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18692!+;
18693 +             %end;
18694 +             %if &em_lossflag ne 0 %then %do;
18695 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18696 +             %end;
18697 +            %end;
18698 +          end;
18699 +          else if last.node then do;
18700 +            %if &validFlag eq N %then %do;
18701 +             %if &em_profitflag ne 0 %then %do;
18702 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18703 +             %end;
18704 +             %if &em_lossflag ne 0 %then %do;
18705 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18706 +             %end;
18707 +             /*if CATEGORY="&targetEvent" then do;
18708 +               profitloss=statvalue;
18709 +             end;*/
18710 +            %end;
18711 +            %else %do;
18712 +             %if &em_profitflag ne 0 %then %do;
18713 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18713!+14.&EM_PROPERTY_SPLITPRECISION);
18714 +                if CATEGORY="&targetEvent" then do;
18715 +                 profitloss=ALTERNATIVE_PROFIT;
18716 +                end;
18717 +             %end;
18718 +             %if &em_lossflag ne 0 %then %do;
18719 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18719!+14.&EM_PROPERTY_SPLITPRECISION);
18720 +                if CATEGORY="&targetEvent" then do;
18721 +                  profitloss=ALTERNATIVE_LOSS;
18722 +                end;
18723 +             %end;
18724 +            %end;
18725 +            output;
18726 +          end;
18727 +          else do;
18728 +            %if &validFlag eq N %then %do;
18729 +             %if &em_profitflag ne 0 %then %do;
18730 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18731 +             %end;
18732 +             %if &em_lossflag ne 0 %then %do;
18733 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18734 +             %end;
18735 +            %end;
18736 +            %else %do;
18737 +             %if &em_profitflag ne 0 %then %do;
18738 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18738!+14.&EM_PROPERTY_SPLITPRECISION);
18739 +             %end;
18740 +             %if &em_lossflag ne 0 %then %do;
18741 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18741!+14.&EM_PROPERTY_SPLITPRECISION);
18742 +             %end;
18743 +            %end;
18744 +          end;
18745 +        %end;
18746 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18747 +          if strip(CATEGORY) = "&targetevent" then do;
18748 +            %if &validFlag eq N %then %do;
18749 +             %if &em_profitflag ne 0 %then %do;
18750 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18751 +             %end;
18752 +             %if &em_lossflag ne 0 %then %do;
18753 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18754 +             %end;
18755 +             profitloss=statvalue;
18756 +            %end;
18757 +            %else %do;
18758 +             %if &em_profitflag ne 0 %then %do;
18759 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18759!+;
18760 +                profitloss=ALTERNATIVE_PROFIT;
18761 +             %end;
18762 +             %if &em_lossflag ne 0 %then %do;
18763 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18764 +                profitloss=ALTERNATIVE_LOSS;
18765 +             %end;
18766 +            %end;
18767 +            output;
18768 +          end;
18769 +        %end;
18770 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18771 +          if strip(CATEGORY) = "&targetevent" then do;
18772 +            %if &validFlag eq N %then %do;
18773 +             profitloss=statvalue;
18774 +            %end;
18775 +            %else %do;
18776 +             %if &em_profitflag ne 0 %then %do;
18777 +                profitloss=ALTERNATIVE_PROFIT;
18778 +             %end;
18779 +             %if &em_lossflag ne 0 %then %do;
18780 +                profitloss=ALTERNATIVE_LOSS;
18781 +             %end;
18782 +            %end;
18783 +            output;
18784 +          end;
18785 +        %end;
18786 +      run;
18787 +    %end;
18789 +    data tempprob(keep= node probtext);
18790 +      length probtext $800;
18791 +      retain probtext;
18792 +      set tempprob ;
18793 +      by node;
18795 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18796 +      %let probtype = &EM_PROPERTY_TARGET;
18797 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18798 +        %let probtype = ALL;
18799 +      %end;
18801 +      %if "&probtype" eq "ALL" %then %do;
18802 +        if first.node then do;
18803 +          %if &validFlag eq N %then %do;
18804 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18805 +          %end;
18806 +          %else %do;
18807 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18808 +          %end;
18809 +        end;
18810 +        else if last.node then do;
18811 +          %if &validFlag eq N %then %do;
18812 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18813 +          %end;
18814 +          %else %do;
18815 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18816 +          %end;
18817 +          output;
18818 +        end;
18819 +        else do;
18820 +          %if &validFlag eq N %then %do;
18821 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18822 +          %end;
18823 +          %else %do;
18824 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18825 +          %end;
18826 +        end;
18827 +      %end;
18828 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18829 +        if strip(CATEGORY) = "&targetevent" then do;
18830 +          %if &validFlag eq N %then %do;
18831 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18832 +          %end;
18833 +          %else %do;
18834 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18835 +          %end;
18836 +          output;
18837 +        end;
18838 +      %end;
18839 +      %else %if "&probtype" eq "NONE" %then %do;
18840 +        if last.node then do;
18841 +          output;
18842 +        end;
18843 +      %end;
18844 +    run;
18845 +  %end;
18847 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18849 +  %let oldexists=0;
18850 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18851 +     data old_tree_plot;
18852 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18853 +        rename nodecolor=oldnodecolor;
18854 +     run;
18856 +     proc sort data=old_tree_plot;
18857 +        by node;
18858 +     run;
18860 +     %let oldexists=1;
18861 +  %end;
18863 +  data &EM_USER_TREE_PLOT;
18864 +    length textall $800;
18865 +    merge tempoutnodes temptargetused
18867 +    %if &em_intTarget eq Y %then %do;
18868 +      tempinterval
18869 +    %end;
18871 +    %if &em_classTarget eq Y %then %do;
18873 +      %if &validFlag eq N %then %do;
18874 +        tempn(rename=(statvalue=N))
18875 +      %end;
18876 +      %else %do;
18877 +        tempn
18878 +      %end;
18880 +      temppredict tempprob
18882 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18883 +        tempprofittext
18884 +      %end;
18885 +    %end;
18886 +    ;
18887 +    by node;
18889 +    /* build nodetext based on user selection */
18890 +    textall="";
18892 +    %if &em_intTarget eq Y %then %do;
18893 +    if tarlevel="INTERVAL" then do;
18894 +      /* Nodeid */
18895 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18896 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18897 +      %end;
18899 +      /* Target identifier if multiple targets are used */
18900 +      %if "&multipleTar" eq "Y" %then %do;
18901 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18902 +      %end;
18904 +      %if &validFlag eq Y %then %do;
18905 +         /* Column labels displayed in validflag eq Y only */
18906 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18907 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18907!+noquote ))";
18908 +         %end;
18910 +         /* Average values */
18911 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18912 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18913 +         %end;
18915 +         /* RASE */
18916 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18917 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18918 +         %end;
18920 +         /* Count */
18921 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18922 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18923 +         %end;
18924 +      %end;
18925 +      %else %do;
18926 +         /* Average values */
18927 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18928 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18929 +         %end;
18931 +         /* RASE */
18932 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18933 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18934 +         %end;
18936 +         /* Count */
18937 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18938 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18939 +         %end;
18940 +      %end;
18942 +      /* nodecolor */
18943 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18944 +        nodecolor=PREDICTION;
18945 +      %end;
18946 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18947 +        nodecolor=RASE;
18948 +      %end;
18949 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18950 +        nodecolor=1;
18951 +      %end;
18953 +    end;
18954 +    %end;
18955 +    %if &em_classTarget eq Y %then %do;
18956 +    if tarlevel^="INTERVAL" then  do;
18958 +      /* Nodeid */
18959 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18960 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18961 +      %end;
18962 +      /* Target identifier if multiple targets are used */
18963 +      %if "&multipleTar" eq "Y" %then %do;
18964 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18965 +      %end;
18967 +      /* Predicted values */
18968 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18969 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18970 +      %end;
18972 +      /* Column labels displayed in validflag eq Y only */
18973 +      %if "&ValidFlag" eq "Y" %then %do;
18974 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18975 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18975!+noquote ))";
18976 +        %end;
18977 +      %end;
18979 +      /* Target Values */
18980 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18981 +        textall=strip(textall)||"0A"x||strip(probtext);
18982 +      %end;
18984 +      /* include profit or loss for all target levels */
18985 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18986 +        textall=strip(textall)||"0A"x||strip(profittext);
18987 +      %end;
18989 +      %if &validFlag eq N %then %do;
18990 +        /* Percent Correct */
18991 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18992 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18993 +        %end;
18995 +         /* Count */
18996 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18997 +          %if "&adjusted" eq "N" %then %do;
18998 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18999 +          %end;
19000 +          %else %do;
19001 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19002 +          %end;
19003 +         %end;
19004 +      %end;
19005 +      %else %do;
19006 +        /* Percent Correct */
19007 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19008 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19009 +        %end;
19011 +         /* Count */
19012 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19013 +          %if "&adjusted" eq "N" %then %do;
19014 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19015 +          %end;
19016 +          %else %do;
19017 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19018 +          %end;
19019 +         %end;
19020 +      %end;
19022 +      /* nodecolor */
19023 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19024 +       %if &multipleTar ne Y %then %do;
19025 +        nodecolor=&predTarget;
19026 +       %end;
19027 +       %else %do;
19028 +         nodecolor=percentcorrect;
19029 +       %end;
19030 +      %end;
19031 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19032 +        nodecolor=percentcorrect;
19033 +      %end;
19034 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19035 +        nodecolor=1;
19036 +      %end;
19037 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19038 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19039 +          nodecolor=percentcorrect;
19040 +        %end;
19041 +        %else %do;
19042 +          nodecolor=profitloss;
19043 +        %end;
19044 +      %end;
19046 +    end;
19047 +    %end;
19048 +    %if &em_intTarget eq Y %then %do;
19049 +     drop  PREDICTION  TARGET TARLEVEL
19050 +     %if &ValidFlag eq Y %then %do;
19051 +         VPREDICTION
19052 +     %end;
19053 +     ;
19054 +    %end;
19055 +    %if &em_classTarget eq Y %then %do;
19056 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19057 +     %if &ValidFlag eq Y %then %do;
19058 +         VSTATVALUE
19059 +     %end;
19060 +     ;
19061 +    %end;
19063 +  run;
19065 +  /* add leaf index information to plotds - based on primary target only*/
19066 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19067 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19068 +      set &EM_USER_OUTSTATS;
19069 +      if ((statname="PROBABILITY"
19070 +      %if &validexist %then %do;
19071 +       or statname="VALID: PROBABILITY"
19072 +      %end;
19073 +      ) AND (CATEGORY="&TARGETEVENT")
19074 +      %if "&multipleTar" eq "Y" %then %do;
19075 +        AND (Target="%EM_TARGET")
19076 +      %end;
19077 +      );
19078 +    run;
19080 +    %if &validexist %then %do;
19081 +      proc sort data=tempprob; by node; run;
19082 +      %let vpredTarget = V%substr(&predTarget, 2);
19083 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19084 +         by node;
19085 +         id statname;
19086 +      run;
19087 +    %end;
19088 +  %end;
19089 +  %else %do;
19090 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19091 +      set &EM_USER_OUTSTATS;
19092 +      if ((statname="PREDICTION"
19093 +      %if &validexist %then %do;
19094 +       or statname="VALID: PREDICTION"
19095 +      %end;
19096 +      )
19097 +      %if "&multipleTar" eq "Y" %then %do;
19098 +        AND (Target="%EM_TARGET")
19099 +      %end;
19100 +      );
19101 +    run;
19102 +    %if &validexist %then %do;
19103 +      proc sort data=tempprob; by node; run;
19104 +      %let vpredTarget = V%substr(&predTarget, 2);
19105 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19106 +         by node;
19107 +         id statname;
19108 +      run;
19109 +    %end;
19110 +  %end;
19112 +  proc sort data=tempprob; by node; run;
19113 +  data tempoutnodes;
19114 +    merge tempoutnodes tempprob;
19115 +    by node;
19116 +  run;
19118 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19119 +  data tempnodes;
19120 +    retain traintotal validtotal;
19121 +    set tempnodes(where=(leaf ne . ));
19122 +    tprob=round(&predTarget, .01);
19123 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19124 +      percevent_train=round(tprob*100, .01);
19125 +    %end;
19126 +    %else %do;
19127 +      percevent_train=tprob;
19128 +    %end;
19130 +    perc_train=round((n/traintotal)*100, 0.01);
19131 +    /* leafwidth already has a *10 multiplier */
19132 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19134 +    %if &validexist %then %do;
19135 +      %let vpredTarget = V%substr(&predTarget,2);
19136 +      vprob=round(&vpredTarget, .01);
19137 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19138 +        percevent_valid=round(vprob*100, .01);
19139 +      %end;
19140 +      %else %do;
19141 +        percevent_valid=vprob;
19142 +      %end;
19143 +      perc_valid=round((vn/validtotal)*100, .01);
19144 +    %end;
19146 +    index=_N_;
19147 +    keep node index tprob perc_train percevent_train
19148 +    %if &validexist %then %do;
19149 +        vprob percevent_valid perc_valid
19150 +    %end;
19151 +    ;
19152 +  run;
19153 +  proc sort data=tempnodes; by node; run;
19154 +  data &EM_USER_TREE_PLOT;
19155 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19156 +    by node;
19157 +    if missing(node) then delete;
19158 +    %if &oldexists %then %do;
19159 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19160 +      drop oldnodecolor;
19161 +    %end;
19162 +    abovetext = compbl(abovetext);
19164 +    /* add variable labels */
19165 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19166 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19167 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19168 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19169 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19170 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19172 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19173 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19174 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19175 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19176 +          %end;
19177 +          %else %do;
19178 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19179 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19180 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19181 +          %end;
19182 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19184 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19185 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19186 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19187 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19188 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19189 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19190 +          %end;
19191 +          %else %do;
19192 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19193 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19194 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19195 +          %end;
19196 +    ;
19197 +  run;
19199 +  /* delete temporary tables */
19200 +  proc datasets lib=work nolist;
19201 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19202 +  run;
19204 +%mend em_tree_makePlotDs;
19208 +%macro em_tree_report;
19210 +   /* report properties */
19211 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19212 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19213 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19214 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19215 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19216 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19217 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19218 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19219 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19220 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19221 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19222 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19223 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19225 +   %let validexist=0;
19226 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19227 +     %let validexist=1;
19228 +   %end;
19230 +   /* determine if multiple targets will be processed */
19231 +   %let em_tree_multipleTargets=N;
19232 +   %let em_tree_numTarget=1;
19233 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19234 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19235 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19236 +         %let em_tree_multipleTargets=N;
19237 +      %end;
19238 +      %else %do;
19239 +        data _null_;
19240 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19241 +          if eof then
19242 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19243 +        run;
19245 +        %if &em_tree_numTarget gt 1 %then %do;
19246 +           %let em_tree_multipleTargets=Y;
19247 +        %end;
19248 +     %end;
19249 +   %end;
19251 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19253 +   /* variable importance */
19254 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19255 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19257 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19258 +     /* and the columns may not be generated                                                                                 */
19259 +     %let em_tree_cvexists=;
19260 +     %let em_tree_surrexists=.;
19261 +     data _null_;
19262 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19263 +       if eof then do ;
19264 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19265 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19266 +       end;
19267 +     run;
19269 +     data &EM_USER_OUTIMPORT;
19270 +         set &EM_USER_OUTIMPORT;
19271 +         /* format columns based on Precison value specified */
19272 +         format importance 15.&EM_PROPERTY_PRECISION
19273 +              %if &validexist %then %do;
19274 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19275 +              %end;
19276 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19277 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19278 +              %end;
19279 +         ;
19280 +     run;
19282 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19283 +     proc print data=&EM_USER_OUTIMPORT
19284 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19285 +          (where=((nrules>0) OR (nsurrogates>0)))
19286 +        %end;
19287 +        %else %do;
19288 +           (where=(nrules>0))
19289 +        %end;
19290 +        label noobs
19291 +        ;
19292 +     run;
19293 +     title10;
19295 +   %end;
19297 +   /* Sequence */
19298 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19299 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19300 +   data _null_ ;
19301 +      set &EM_USER_outseq (obs=2) end=eof ;
19302 +      if eof then do ;
19303 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19304 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19305 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19306 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19307 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19308 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19309 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19310 +      end;
19311 +    run;
19313 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19314 +      data &EM_USER_OUTSEQ;
19315 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19316 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19317 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19318 +           _XMISC_=_VMISC_
19319 +        %end;
19320 +        %if "&em_tree_aprof" ne "."  %then %do;
19321 +           _XAPROF_=_VAPROF_
19322 +           _XPROF_ = _VPROF_
19323 +        %end;
19324 +        %if "&em_tree_aloss" ne "."  %then %do;
19325 +           _XALOSS_=_VALOSS_
19326 +        %end;
19327 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19328 +           _XPASE_ = _VPASE_
19329 +           _XPMISC_ = _VPMISC_
19330 +        %end;
19332 +        ));
19333 +     %end;
19334 +     %else %do;
19335 +        set &EM_USER_OUTSEQ;
19336 +     %end;
19338 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19339 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19340 +            _MISC_   15.&EM_PROPERTY_PRECISION
19341 +         %end;
19342 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19343 +            _PASE_  15.&EM_PROPERTY_PRECISION
19344 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19345 +         %end;
19346 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19347 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19348 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19349 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19350 +            %end;
19351 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19352 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19353 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19354 +            %end;
19355 +         %end;
19356 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19357 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19358 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19359 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19360 +            %end;
19361 +         %end;
19362 +         %if "&em_tree_seq" ne "." %then %do;
19363 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19364 +         %end;
19365 +         %if "&em_tree_vseq" ne "." %then %do;
19366 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19367 +         %end;
19368 +         %if "&em_tree_aprof" ne "." %then %do;
19369 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19370 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19371 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19372 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19373 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19374 +           %end;
19375 +         %end;
19376 +         %else %if "&em_tree_aloss" ne "." %then %do;
19377 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19378 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19379 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19380 +           %end;
19381 +         %end;
19382 +      ;
19383 +    run;
19384 +   %end;
19386 +   /* Observation Based Importance */
19387 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19389 +      /* need to check for 0 obs */
19390 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19391 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19392 +      %let rc=%sysfunc(close(&dsid));
19394 +      %if &onobs %then %do;
19395 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19396 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19398 +         data &EM_USER_OUTOBSIMP;
19399 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19400 +           if _a;
19401 +           by _INPUT1_;
19402 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19403 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19404 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19405 +                   %end;
19406 +                   ;
19407 +         run;
19408 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19409 +      %end;
19410 +   %end;
19412 +  %end;
19414 +  /* create dataset to support tree diagram and icicle plot */
19415 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19416 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19418 +  /* display tree diagram */
19419 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19420 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19422 +  /* display icicle diagram */
19423 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19424 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19426 +  /* Leaf Statistics Plot */
19427 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19429 +  /* print leaf information to output window */
19430 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19432 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19433 +       by descending N;
19434 +     run;
19436 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19437 +     %local vn;
19438 +     data _null_;
19439 +       set t (obs=2) end=eof;
19440 +       if eof then do;
19441 +         call symput("vn", strip(put(vn, best.)));
19442 +       end;
19443 +     run;
19445 +     data t;
19446 +       set t;
19447 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19448 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19449 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19450 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19451 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19452 +       %end;
19453 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19454 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19455 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19456 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19457 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19458 +          %end;
19459 +       %end;
19460 +       ;
19461 +     run;
19463 +     /* determine if rase is found in t */
19464 +    %let dsid=%sysfunc(open(t,i));
19465 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19466 +    %let rc=%sysfunc(close(&dsid));
19468 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19469 +     proc print data=t noobs label;
19470 +       where tprob ne .;
19471 +       var node depth N tprob
19472 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19473 +         %if "&vn" ne "." %then %do;
19474 +           VN
19475 +         %end;
19476 +         vprob
19477 +       %end;
19478 +       %if &raseexists %then %do;
19479 +            RASE
19480 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19481 +              VRASE
19482 +            %end;
19483 +       %end;
19484 +       ;
19485 +     run;
19486 +     title10;
19487 +  %end;
19489 +  /* create plots that are done during training of node */
19490 +  /* display iterative plot, including reference line */
19491 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19492 +   /* %if &nleaves eq  %then %do; */
19493 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19494 +      data _null_;
19495 +        set &EM_USER_OUTTOPOLOGY end=eof;
19496 +        if eof then do;
19497 +          call symput('nleaves', LEAF);
19498 +        end;
19499 +      run;
19500 +   /* %end; */
19502 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19503 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19504 +  %end;
19506 +  /* display leaf statistics */
19507 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19509 +  /* stats by node if multiple targets = Y */
19510 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19511 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19512 +    data &EM_USER_OUTSTATS;
19513 +      set &EM_USER_OUTSTATS;
19515 +     * if STATNAME="TARGET" then delete;
19516 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19517 +      drop leaf;
19518 +    run;
19519 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19521 +  %end;
19522 +  %else %do;
19523 +    /* add outstats and outdescribe to spk but not results */
19524 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19525 +  %end;
19527 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: The data set EMWS2.TREE2_OUTIMPORT has 13 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS2.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _VASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set EMWS2.TREE2_OUTSEQ.
NOTE: The data set EMWS2.TREE2_OUTSEQ has 40 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_QUALITY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS2.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 39 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set EMWS2.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 22 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 39 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 22 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 22 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 39 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS2.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 39 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 39 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      155:103   204:136   247:102   247:125   279:104   313:104   355:103   355:126   398:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      414:99
NOTE: There were 39 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 78 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 799 observations read from the data set EMWS2.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 39 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 78 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 39 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set EMWS2.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 79 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable VN is uninitialized.
NOTE: There were 78 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 79 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 39 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 79 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 79 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 39 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 39 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 79 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS2.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 237 observations read from the data set EMWS2.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 237 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 237 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 158 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 79 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 237 observations read from the data set EMWS2.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 237 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 237 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 79 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 237 observations and 6 variables.
NOTE: The data set WORK.TEMPCLASS has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 237 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 79 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 79 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 79 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      940:196   948:204
NOTE: There were 79 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 79 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 79 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set EMWS2.TREE2_TREE_PLOT has 79 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 237 observations read from the data set EMWS2.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 79 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 79 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 79 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 79 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 79 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 40 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 40 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable vprob is uninitialized.
NOTE: Variable perc_valid is uninitialized.
NOTE: Variable percevent_valid is uninitialized.
NOTE: There were 79 observations read from the data set EMWS2.TREE2_TREE_PLOT.
NOTE: There were 40 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS2.TREE2_TREE_PLOT has 79 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set EMWS2.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 79 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 79 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      290:141
NOTE: There were 79 observations read from the data set EMWS2.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
19528
19529  *------------------------------------------------------------*;
19530  * End REPORT: Tree2;
19531  *------------------------------------------------------------*;
 
19532  /* Reset EM Options */
19533  options formchar="|----|+|---+=|-/\<>*";
19534  options nocenter ls=256 ps=10000;
19535  goptions reset=all device=GIF NODISPLAY;
 
19536  proc sort data=WORK.EM_USER_REPORT;
19537  by ID VIEW;
19538  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19539  proc sort data=EMWS2.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19540  by NAME;
19541  run;
 
NOTE: There were 17 observations read from the data set EMWS2.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 17 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19542  proc sort data=EMWS2.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19543  by NAME;
19544  run;
 
NOTE: There were 17 observations read from the data set EMWS2.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19545  data WORK.ASSESS_META;
19546  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19547  by NAME;
19548  run;
 
NOTE: There were 17 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 17 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 17 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19549  data EM_temp_assessMeta;
19550  set EMWS2.Tree2_CMeta_TRAIN;
19551  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19552  run;
 
NOTE: There were 4 observations read from the data set EMWS2.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19553  data EM_temp_assessdata;
19554  set EMWS2.Tree2_TRAIN(keep=
19555  P_quality
19556  R_quality
19557  _WARN_
19558  residual_sugar
19559  quality
19560  );
19561  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 5198 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 5198 observations read from the data set EMWS2.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 5198 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
 
 
 
 
 
 
23892   %let _cn = %sysfunc(getoption(CENTER));
23893   options nocenter;
23894   proc print data=EMWS2.Tree2_EMREPORTFIT noobs label;
23895   var STAT LABEL TRAIN
23896   TEST
23897   ;
23898   by TARGET TARGETLABEL;
23899   title9 ' ';
23900   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
23901   run;
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23902   title10;
23903   options &_cn;
 
23904   proc datasets library=EMWS2 nolist;
23905   modify Tree2_EMRANK;
23906   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
23907   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
23908   run;
 
NOTE: MODIFY was successful for EMWS2.TREE2_EMRANK.DATA.
23909   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
23910   %let _cn = %sysfunc(getoption(CENTER));
23911   options nocenter;
23912   proc print data=EMWS2.Tree2_EMRANK label noobs;
23913   var
23914   decile N _targetMean_ _meanP_;
23915   by
23916   notsorted DATAROLE
23917   notsorted TARGET
23918   notsorted TARGETLABEL
23919   ;
23920   title9 ' ';
23921   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
23922   run;
 
NOTE: There were 17 observations read from the data set EMWS2.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23923   title10;
23924   options &_cn;
 
23925   proc datasets library=EMWS2 nolist;
23926   modify Tree2_EMSCOREDIST;
23927   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
23928   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
23929   run;
 
NOTE: MODIFY was successful for EMWS2.TREE2_EMSCOREDIST.DATA.
23930   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
